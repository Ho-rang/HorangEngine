// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[42]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_AUTOLOGIN;
struct C_AUTOLOGINDefaultTypeInternal;
extern C_AUTOLOGINDefaultTypeInternal _C_AUTOLOGIN_default_instance_;
class C_MOVE;
struct C_MOVEDefaultTypeInternal;
extern C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
class C_PLAY_JUMP;
struct C_PLAY_JUMPDefaultTypeInternal;
extern C_PLAY_JUMPDefaultTypeInternal _C_PLAY_JUMP_default_instance_;
class C_PLAY_RELOAD;
struct C_PLAY_RELOADDefaultTypeInternal;
extern C_PLAY_RELOADDefaultTypeInternal _C_PLAY_RELOAD_default_instance_;
class C_PLAY_ROLL;
struct C_PLAY_ROLLDefaultTypeInternal;
extern C_PLAY_ROLLDefaultTypeInternal _C_PLAY_ROLL_default_instance_;
class C_PLAY_SHOOT;
struct C_PLAY_SHOOTDefaultTypeInternal;
extern C_PLAY_SHOOTDefaultTypeInternal _C_PLAY_SHOOT_default_instance_;
class C_PLAY_UPDATE;
struct C_PLAY_UPDATEDefaultTypeInternal;
extern C_PLAY_UPDATEDefaultTypeInternal _C_PLAY_UPDATE_default_instance_;
class C_ROOM_CHANGE_TEAM;
struct C_ROOM_CHANGE_TEAMDefaultTypeInternal;
extern C_ROOM_CHANGE_TEAMDefaultTypeInternal _C_ROOM_CHANGE_TEAM_default_instance_;
class C_ROOM_CHAT;
struct C_ROOM_CHATDefaultTypeInternal;
extern C_ROOM_CHATDefaultTypeInternal _C_ROOM_CHAT_default_instance_;
class C_ROOM_CREATE;
struct C_ROOM_CREATEDefaultTypeInternal;
extern C_ROOM_CREATEDefaultTypeInternal _C_ROOM_CREATE_default_instance_;
class C_ROOM_ENTER;
struct C_ROOM_ENTERDefaultTypeInternal;
extern C_ROOM_ENTERDefaultTypeInternal _C_ROOM_ENTER_default_instance_;
class C_ROOM_KICK;
struct C_ROOM_KICKDefaultTypeInternal;
extern C_ROOM_KICKDefaultTypeInternal _C_ROOM_KICK_default_instance_;
class C_ROOM_LEAVE;
struct C_ROOM_LEAVEDefaultTypeInternal;
extern C_ROOM_LEAVEDefaultTypeInternal _C_ROOM_LEAVE_default_instance_;
class C_ROOM_LIST_REQUEST;
struct C_ROOM_LIST_REQUESTDefaultTypeInternal;
extern C_ROOM_LIST_REQUESTDefaultTypeInternal _C_ROOM_LIST_REQUEST_default_instance_;
class C_ROOM_SETTING;
struct C_ROOM_SETTINGDefaultTypeInternal;
extern C_ROOM_SETTINGDefaultTypeInternal _C_ROOM_SETTING_default_instance_;
class C_ROOM_START;
struct C_ROOM_STARTDefaultTypeInternal;
extern C_ROOM_STARTDefaultTypeInternal _C_ROOM_START_default_instance_;
class C_SIGNIN;
struct C_SIGNINDefaultTypeInternal;
extern C_SIGNINDefaultTypeInternal _C_SIGNIN_default_instance_;
class C_SIGNUP;
struct C_SIGNUPDefaultTypeInternal;
extern C_SIGNUPDefaultTypeInternal _C_SIGNUP_default_instance_;
class C_TEST;
struct C_TESTDefaultTypeInternal;
extern C_TESTDefaultTypeInternal _C_TEST_default_instance_;
class S_ANOTHER_ENTER_ROOM;
struct S_ANOTHER_ENTER_ROOMDefaultTypeInternal;
extern S_ANOTHER_ENTER_ROOMDefaultTypeInternal _S_ANOTHER_ENTER_ROOM_default_instance_;
class S_ANOTHER_LEAVE_ROOM;
struct S_ANOTHER_LEAVE_ROOMDefaultTypeInternal;
extern S_ANOTHER_LEAVE_ROOMDefaultTypeInternal _S_ANOTHER_LEAVE_ROOM_default_instance_;
class S_CONNECTED;
struct S_CONNECTEDDefaultTypeInternal;
extern S_CONNECTEDDefaultTypeInternal _S_CONNECTED_default_instance_;
class S_ERROR;
struct S_ERRORDefaultTypeInternal;
extern S_ERRORDefaultTypeInternal _S_ERROR_default_instance_;
class S_GAME_END;
struct S_GAME_ENDDefaultTypeInternal;
extern S_GAME_ENDDefaultTypeInternal _S_GAME_END_default_instance_;
class S_GAME_START;
struct S_GAME_STARTDefaultTypeInternal;
extern S_GAME_STARTDefaultTypeInternal _S_GAME_START_default_instance_;
class S_PLAY_JUMP;
struct S_PLAY_JUMPDefaultTypeInternal;
extern S_PLAY_JUMPDefaultTypeInternal _S_PLAY_JUMP_default_instance_;
class S_PLAY_KILL_DEATH;
struct S_PLAY_KILL_DEATHDefaultTypeInternal;
extern S_PLAY_KILL_DEATHDefaultTypeInternal _S_PLAY_KILL_DEATH_default_instance_;
class S_PLAY_RELOAD;
struct S_PLAY_RELOADDefaultTypeInternal;
extern S_PLAY_RELOADDefaultTypeInternal _S_PLAY_RELOAD_default_instance_;
class S_PLAY_RESPAWN;
struct S_PLAY_RESPAWNDefaultTypeInternal;
extern S_PLAY_RESPAWNDefaultTypeInternal _S_PLAY_RESPAWN_default_instance_;
class S_PLAY_ROLL;
struct S_PLAY_ROLLDefaultTypeInternal;
extern S_PLAY_ROLLDefaultTypeInternal _S_PLAY_ROLL_default_instance_;
class S_PLAY_SHOOT;
struct S_PLAY_SHOOTDefaultTypeInternal;
extern S_PLAY_SHOOTDefaultTypeInternal _S_PLAY_SHOOT_default_instance_;
class S_PLAY_UPDATE;
struct S_PLAY_UPDATEDefaultTypeInternal;
extern S_PLAY_UPDATEDefaultTypeInternal _S_PLAY_UPDATE_default_instance_;
class S_ROOM_CHANGE_TEAM;
struct S_ROOM_CHANGE_TEAMDefaultTypeInternal;
extern S_ROOM_CHANGE_TEAMDefaultTypeInternal _S_ROOM_CHANGE_TEAM_default_instance_;
class S_ROOM_CHAT;
struct S_ROOM_CHATDefaultTypeInternal;
extern S_ROOM_CHATDefaultTypeInternal _S_ROOM_CHAT_default_instance_;
class S_ROOM_ENTER;
struct S_ROOM_ENTERDefaultTypeInternal;
extern S_ROOM_ENTERDefaultTypeInternal _S_ROOM_ENTER_default_instance_;
class S_ROOM_KICK;
struct S_ROOM_KICKDefaultTypeInternal;
extern S_ROOM_KICKDefaultTypeInternal _S_ROOM_KICK_default_instance_;
class S_ROOM_LEAVE;
struct S_ROOM_LEAVEDefaultTypeInternal;
extern S_ROOM_LEAVEDefaultTypeInternal _S_ROOM_LEAVE_default_instance_;
class S_ROOM_LIST;
struct S_ROOM_LISTDefaultTypeInternal;
extern S_ROOM_LISTDefaultTypeInternal _S_ROOM_LIST_default_instance_;
class S_ROOM_START;
struct S_ROOM_STARTDefaultTypeInternal;
extern S_ROOM_STARTDefaultTypeInternal _S_ROOM_START_default_instance_;
class S_SIGNIN_OK;
struct S_SIGNIN_OKDefaultTypeInternal;
extern S_SIGNIN_OKDefaultTypeInternal _S_SIGNIN_OK_default_instance_;
class S_SIGNUP_OK;
struct S_SIGNUP_OKDefaultTypeInternal;
extern S_SIGNUP_OKDefaultTypeInternal _S_SIGNUP_OK_default_instance_;
class S_TEST;
struct S_TESTDefaultTypeInternal;
extern S_TESTDefaultTypeInternal _S_TEST_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_AUTOLOGIN* Arena::CreateMaybeMessage<::Protocol::C_AUTOLOGIN>(Arena*);
template<> ::Protocol::C_MOVE* Arena::CreateMaybeMessage<::Protocol::C_MOVE>(Arena*);
template<> ::Protocol::C_PLAY_JUMP* Arena::CreateMaybeMessage<::Protocol::C_PLAY_JUMP>(Arena*);
template<> ::Protocol::C_PLAY_RELOAD* Arena::CreateMaybeMessage<::Protocol::C_PLAY_RELOAD>(Arena*);
template<> ::Protocol::C_PLAY_ROLL* Arena::CreateMaybeMessage<::Protocol::C_PLAY_ROLL>(Arena*);
template<> ::Protocol::C_PLAY_SHOOT* Arena::CreateMaybeMessage<::Protocol::C_PLAY_SHOOT>(Arena*);
template<> ::Protocol::C_PLAY_UPDATE* Arena::CreateMaybeMessage<::Protocol::C_PLAY_UPDATE>(Arena*);
template<> ::Protocol::C_ROOM_CHANGE_TEAM* Arena::CreateMaybeMessage<::Protocol::C_ROOM_CHANGE_TEAM>(Arena*);
template<> ::Protocol::C_ROOM_CHAT* Arena::CreateMaybeMessage<::Protocol::C_ROOM_CHAT>(Arena*);
template<> ::Protocol::C_ROOM_CREATE* Arena::CreateMaybeMessage<::Protocol::C_ROOM_CREATE>(Arena*);
template<> ::Protocol::C_ROOM_ENTER* Arena::CreateMaybeMessage<::Protocol::C_ROOM_ENTER>(Arena*);
template<> ::Protocol::C_ROOM_KICK* Arena::CreateMaybeMessage<::Protocol::C_ROOM_KICK>(Arena*);
template<> ::Protocol::C_ROOM_LEAVE* Arena::CreateMaybeMessage<::Protocol::C_ROOM_LEAVE>(Arena*);
template<> ::Protocol::C_ROOM_LIST_REQUEST* Arena::CreateMaybeMessage<::Protocol::C_ROOM_LIST_REQUEST>(Arena*);
template<> ::Protocol::C_ROOM_SETTING* Arena::CreateMaybeMessage<::Protocol::C_ROOM_SETTING>(Arena*);
template<> ::Protocol::C_ROOM_START* Arena::CreateMaybeMessage<::Protocol::C_ROOM_START>(Arena*);
template<> ::Protocol::C_SIGNIN* Arena::CreateMaybeMessage<::Protocol::C_SIGNIN>(Arena*);
template<> ::Protocol::C_SIGNUP* Arena::CreateMaybeMessage<::Protocol::C_SIGNUP>(Arena*);
template<> ::Protocol::C_TEST* Arena::CreateMaybeMessage<::Protocol::C_TEST>(Arena*);
template<> ::Protocol::S_ANOTHER_ENTER_ROOM* Arena::CreateMaybeMessage<::Protocol::S_ANOTHER_ENTER_ROOM>(Arena*);
template<> ::Protocol::S_ANOTHER_LEAVE_ROOM* Arena::CreateMaybeMessage<::Protocol::S_ANOTHER_LEAVE_ROOM>(Arena*);
template<> ::Protocol::S_CONNECTED* Arena::CreateMaybeMessage<::Protocol::S_CONNECTED>(Arena*);
template<> ::Protocol::S_ERROR* Arena::CreateMaybeMessage<::Protocol::S_ERROR>(Arena*);
template<> ::Protocol::S_GAME_END* Arena::CreateMaybeMessage<::Protocol::S_GAME_END>(Arena*);
template<> ::Protocol::S_GAME_START* Arena::CreateMaybeMessage<::Protocol::S_GAME_START>(Arena*);
template<> ::Protocol::S_PLAY_JUMP* Arena::CreateMaybeMessage<::Protocol::S_PLAY_JUMP>(Arena*);
template<> ::Protocol::S_PLAY_KILL_DEATH* Arena::CreateMaybeMessage<::Protocol::S_PLAY_KILL_DEATH>(Arena*);
template<> ::Protocol::S_PLAY_RELOAD* Arena::CreateMaybeMessage<::Protocol::S_PLAY_RELOAD>(Arena*);
template<> ::Protocol::S_PLAY_RESPAWN* Arena::CreateMaybeMessage<::Protocol::S_PLAY_RESPAWN>(Arena*);
template<> ::Protocol::S_PLAY_ROLL* Arena::CreateMaybeMessage<::Protocol::S_PLAY_ROLL>(Arena*);
template<> ::Protocol::S_PLAY_SHOOT* Arena::CreateMaybeMessage<::Protocol::S_PLAY_SHOOT>(Arena*);
template<> ::Protocol::S_PLAY_UPDATE* Arena::CreateMaybeMessage<::Protocol::S_PLAY_UPDATE>(Arena*);
template<> ::Protocol::S_ROOM_CHANGE_TEAM* Arena::CreateMaybeMessage<::Protocol::S_ROOM_CHANGE_TEAM>(Arena*);
template<> ::Protocol::S_ROOM_CHAT* Arena::CreateMaybeMessage<::Protocol::S_ROOM_CHAT>(Arena*);
template<> ::Protocol::S_ROOM_ENTER* Arena::CreateMaybeMessage<::Protocol::S_ROOM_ENTER>(Arena*);
template<> ::Protocol::S_ROOM_KICK* Arena::CreateMaybeMessage<::Protocol::S_ROOM_KICK>(Arena*);
template<> ::Protocol::S_ROOM_LEAVE* Arena::CreateMaybeMessage<::Protocol::S_ROOM_LEAVE>(Arena*);
template<> ::Protocol::S_ROOM_LIST* Arena::CreateMaybeMessage<::Protocol::S_ROOM_LIST>(Arena*);
template<> ::Protocol::S_ROOM_START* Arena::CreateMaybeMessage<::Protocol::S_ROOM_START>(Arena*);
template<> ::Protocol::S_SIGNIN_OK* Arena::CreateMaybeMessage<::Protocol::S_SIGNIN_OK>(Arena*);
template<> ::Protocol::S_SIGNUP_OK* Arena::CreateMaybeMessage<::Protocol::S_SIGNUP_OK>(Arena*);
template<> ::Protocol::S_TEST* Arena::CreateMaybeMessage<::Protocol::S_TEST>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_TEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_TEST) */ {
 public:
  inline C_TEST() : C_TEST(nullptr) {}
  ~C_TEST() override;
  explicit constexpr C_TEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_TEST(const C_TEST& from);
  C_TEST(C_TEST&& from) noexcept
    : C_TEST() {
    *this = ::std::move(from);
  }

  inline C_TEST& operator=(const C_TEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_TEST& operator=(C_TEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_TEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_TEST* internal_default_instance() {
    return reinterpret_cast<const C_TEST*>(
               &_C_TEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_TEST& a, C_TEST& b) {
    a.Swap(&b);
  }
  inline void Swap(C_TEST* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_TEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_TEST* New() const final {
    return new C_TEST();
  }

  C_TEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_TEST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_TEST& from);
  void MergeFrom(const C_TEST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_TEST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_TEST";
  }
  protected:
  explicit C_TEST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
  };
  // int64 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int64 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_TEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_TEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_TEST) */ {
 public:
  inline S_TEST() : S_TEST(nullptr) {}
  ~S_TEST() override;
  explicit constexpr S_TEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_TEST(const S_TEST& from);
  S_TEST(S_TEST&& from) noexcept
    : S_TEST() {
    *this = ::std::move(from);
  }

  inline S_TEST& operator=(const S_TEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_TEST& operator=(S_TEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_TEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_TEST* internal_default_instance() {
    return reinterpret_cast<const S_TEST*>(
               &_S_TEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_TEST& a, S_TEST& b) {
    a.Swap(&b);
  }
  inline void Swap(S_TEST* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_TEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_TEST* New() const final {
    return new S_TEST();
  }

  S_TEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_TEST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_TEST& from);
  void MergeFrom(const S_TEST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_TEST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_TEST";
  }
  protected:
  explicit S_TEST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
  };
  // int64 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int64 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_TEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MOVE) */ {
 public:
  inline C_MOVE() : C_MOVE(nullptr) {}
  ~C_MOVE() override;
  explicit constexpr C_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MOVE(const C_MOVE& from);
  C_MOVE(C_MOVE&& from) noexcept
    : C_MOVE() {
    *this = ::std::move(from);
  }

  inline C_MOVE& operator=(const C_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MOVE& operator=(C_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MOVE* internal_default_instance() {
    return reinterpret_cast<const C_MOVE*>(
               &_C_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_MOVE& a, C_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MOVE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_MOVE* New() const final {
    return new C_MOVE();
  }

  C_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_MOVE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_MOVE& from);
  void MergeFrom(const C_MOVE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MOVE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MOVE";
  }
  protected:
  explicit C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPosFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 pos = 2;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::uint32 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pos() const;
  void _internal_set_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ERROR final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ERROR) */ {
 public:
  inline S_ERROR() : S_ERROR(nullptr) {}
  ~S_ERROR() override;
  explicit constexpr S_ERROR(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ERROR(const S_ERROR& from);
  S_ERROR(S_ERROR&& from) noexcept
    : S_ERROR() {
    *this = ::std::move(from);
  }

  inline S_ERROR& operator=(const S_ERROR& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ERROR& operator=(S_ERROR&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ERROR& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ERROR* internal_default_instance() {
    return reinterpret_cast<const S_ERROR*>(
               &_S_ERROR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_ERROR& a, S_ERROR& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ERROR* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ERROR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ERROR* New() const final {
    return new S_ERROR();
  }

  S_ERROR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ERROR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ERROR& from);
  void MergeFrom(const S_ERROR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ERROR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ERROR";
  }
  protected:
  explicit S_ERROR(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
  };
  // int32 errorCode = 1;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ERROR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CONNECTED final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CONNECTED) */ {
 public:
  inline S_CONNECTED() : S_CONNECTED(nullptr) {}
  ~S_CONNECTED() override;
  explicit constexpr S_CONNECTED(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CONNECTED(const S_CONNECTED& from);
  S_CONNECTED(S_CONNECTED&& from) noexcept
    : S_CONNECTED() {
    *this = ::std::move(from);
  }

  inline S_CONNECTED& operator=(const S_CONNECTED& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CONNECTED& operator=(S_CONNECTED&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CONNECTED& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CONNECTED* internal_default_instance() {
    return reinterpret_cast<const S_CONNECTED*>(
               &_S_CONNECTED_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_CONNECTED& a, S_CONNECTED& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CONNECTED* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CONNECTED* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CONNECTED* New() const final {
    return new S_CONNECTED();
  }

  S_CONNECTED* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CONNECTED>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CONNECTED& from);
  void MergeFrom(const S_CONNECTED& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CONNECTED* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CONNECTED";
  }
  protected:
  explicit S_CONNECTED(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_CONNECTED)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_AUTOLOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_AUTOLOGIN) */ {
 public:
  inline C_AUTOLOGIN() : C_AUTOLOGIN(nullptr) {}
  ~C_AUTOLOGIN() override;
  explicit constexpr C_AUTOLOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_AUTOLOGIN(const C_AUTOLOGIN& from);
  C_AUTOLOGIN(C_AUTOLOGIN&& from) noexcept
    : C_AUTOLOGIN() {
    *this = ::std::move(from);
  }

  inline C_AUTOLOGIN& operator=(const C_AUTOLOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_AUTOLOGIN& operator=(C_AUTOLOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_AUTOLOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_AUTOLOGIN* internal_default_instance() {
    return reinterpret_cast<const C_AUTOLOGIN*>(
               &_C_AUTOLOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_AUTOLOGIN& a, C_AUTOLOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_AUTOLOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_AUTOLOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_AUTOLOGIN* New() const final {
    return new C_AUTOLOGIN();
  }

  C_AUTOLOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_AUTOLOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_AUTOLOGIN& from);
  void MergeFrom(const C_AUTOLOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_AUTOLOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_AUTOLOGIN";
  }
  protected:
  explicit C_AUTOLOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_AUTOLOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SIGNIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SIGNIN) */ {
 public:
  inline C_SIGNIN() : C_SIGNIN(nullptr) {}
  ~C_SIGNIN() override;
  explicit constexpr C_SIGNIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SIGNIN(const C_SIGNIN& from);
  C_SIGNIN(C_SIGNIN&& from) noexcept
    : C_SIGNIN() {
    *this = ::std::move(from);
  }

  inline C_SIGNIN& operator=(const C_SIGNIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SIGNIN& operator=(C_SIGNIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SIGNIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SIGNIN* internal_default_instance() {
    return reinterpret_cast<const C_SIGNIN*>(
               &_C_SIGNIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_SIGNIN& a, C_SIGNIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SIGNIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SIGNIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_SIGNIN* New() const final {
    return new C_SIGNIN();
  }

  C_SIGNIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_SIGNIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_SIGNIN& from);
  void MergeFrom(const C_SIGNIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SIGNIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SIGNIN";
  }
  protected:
  explicit C_SIGNIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SIGNIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SIGNIN_OK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SIGNIN_OK) */ {
 public:
  inline S_SIGNIN_OK() : S_SIGNIN_OK(nullptr) {}
  ~S_SIGNIN_OK() override;
  explicit constexpr S_SIGNIN_OK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SIGNIN_OK(const S_SIGNIN_OK& from);
  S_SIGNIN_OK(S_SIGNIN_OK&& from) noexcept
    : S_SIGNIN_OK() {
    *this = ::std::move(from);
  }

  inline S_SIGNIN_OK& operator=(const S_SIGNIN_OK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SIGNIN_OK& operator=(S_SIGNIN_OK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SIGNIN_OK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SIGNIN_OK* internal_default_instance() {
    return reinterpret_cast<const S_SIGNIN_OK*>(
               &_S_SIGNIN_OK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_SIGNIN_OK& a, S_SIGNIN_OK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SIGNIN_OK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SIGNIN_OK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SIGNIN_OK* New() const final {
    return new S_SIGNIN_OK();
  }

  S_SIGNIN_OK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SIGNIN_OK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SIGNIN_OK& from);
  void MergeFrom(const S_SIGNIN_OK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SIGNIN_OK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SIGNIN_OK";
  }
  protected:
  explicit S_SIGNIN_OK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // string nickName = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SIGNIN_OK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SIGNUP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SIGNUP) */ {
 public:
  inline C_SIGNUP() : C_SIGNUP(nullptr) {}
  ~C_SIGNUP() override;
  explicit constexpr C_SIGNUP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SIGNUP(const C_SIGNUP& from);
  C_SIGNUP(C_SIGNUP&& from) noexcept
    : C_SIGNUP() {
    *this = ::std::move(from);
  }

  inline C_SIGNUP& operator=(const C_SIGNUP& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SIGNUP& operator=(C_SIGNUP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SIGNUP& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SIGNUP* internal_default_instance() {
    return reinterpret_cast<const C_SIGNUP*>(
               &_C_SIGNUP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C_SIGNUP& a, C_SIGNUP& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SIGNUP* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SIGNUP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_SIGNUP* New() const final {
    return new C_SIGNUP();
  }

  C_SIGNUP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_SIGNUP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_SIGNUP& from);
  void MergeFrom(const C_SIGNUP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SIGNUP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SIGNUP";
  }
  protected:
  explicit C_SIGNUP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kNicknameFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SIGNUP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SIGNUP_OK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SIGNUP_OK) */ {
 public:
  inline S_SIGNUP_OK() : S_SIGNUP_OK(nullptr) {}
  ~S_SIGNUP_OK() override;
  explicit constexpr S_SIGNUP_OK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SIGNUP_OK(const S_SIGNUP_OK& from);
  S_SIGNUP_OK(S_SIGNUP_OK&& from) noexcept
    : S_SIGNUP_OK() {
    *this = ::std::move(from);
  }

  inline S_SIGNUP_OK& operator=(const S_SIGNUP_OK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SIGNUP_OK& operator=(S_SIGNUP_OK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SIGNUP_OK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SIGNUP_OK* internal_default_instance() {
    return reinterpret_cast<const S_SIGNUP_OK*>(
               &_S_SIGNUP_OK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_SIGNUP_OK& a, S_SIGNUP_OK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SIGNUP_OK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SIGNUP_OK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SIGNUP_OK* New() const final {
    return new S_SIGNUP_OK();
  }

  S_SIGNUP_OK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SIGNUP_OK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SIGNUP_OK& from);
  void MergeFrom(const S_SIGNUP_OK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SIGNUP_OK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SIGNUP_OK";
  }
  protected:
  explicit S_SIGNUP_OK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_SIGNUP_OK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_CREATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOM_CREATE) */ {
 public:
  inline C_ROOM_CREATE() : C_ROOM_CREATE(nullptr) {}
  ~C_ROOM_CREATE() override;
  explicit constexpr C_ROOM_CREATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_CREATE(const C_ROOM_CREATE& from);
  C_ROOM_CREATE(C_ROOM_CREATE&& from) noexcept
    : C_ROOM_CREATE() {
    *this = ::std::move(from);
  }

  inline C_ROOM_CREATE& operator=(const C_ROOM_CREATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_CREATE& operator=(C_ROOM_CREATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_CREATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_CREATE* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_CREATE*>(
               &_C_ROOM_CREATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_ROOM_CREATE& a, C_ROOM_CREATE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_CREATE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_CREATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ROOM_CREATE* New() const final {
    return new C_ROOM_CREATE();
  }

  C_ROOM_CREATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ROOM_CREATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ROOM_CREATE& from);
  void MergeFrom(const C_ROOM_CREATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_CREATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOM_CREATE";
  }
  protected:
  explicit C_ROOM_CREATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kMaxPlayerCountFieldNumber = 3,
    kIsPrivateFieldNumber = 4,
    kIsTeamFieldNumber = 5,
    kMapFieldNumber = 6,
  };
  // string roomName = 1;
  void clear_roomname();
  const std::string& roomname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 maxPlayerCount = 3;
  void clear_maxplayercount();
  ::PROTOBUF_NAMESPACE_ID::int32 maxplayercount() const;
  void set_maxplayercount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxplayercount() const;
  void _internal_set_maxplayercount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isPrivate = 4;
  void clear_isprivate();
  bool isprivate() const;
  void set_isprivate(bool value);
  private:
  bool _internal_isprivate() const;
  void _internal_set_isprivate(bool value);
  public:

  // bool isTeam = 5;
  void clear_isteam();
  bool isteam() const;
  void set_isteam(bool value);
  private:
  bool _internal_isteam() const;
  void _internal_set_isteam(bool value);
  public:

  // int32 map = 6;
  void clear_map();
  ::PROTOBUF_NAMESPACE_ID::int32 map() const;
  void set_map(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map() const;
  void _internal_set_map(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOM_CREATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxplayercount_;
  bool isprivate_;
  bool isteam_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_SETTING final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOM_SETTING) */ {
 public:
  inline C_ROOM_SETTING() : C_ROOM_SETTING(nullptr) {}
  ~C_ROOM_SETTING() override;
  explicit constexpr C_ROOM_SETTING(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_SETTING(const C_ROOM_SETTING& from);
  C_ROOM_SETTING(C_ROOM_SETTING&& from) noexcept
    : C_ROOM_SETTING() {
    *this = ::std::move(from);
  }

  inline C_ROOM_SETTING& operator=(const C_ROOM_SETTING& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_SETTING& operator=(C_ROOM_SETTING&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_SETTING& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_SETTING* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_SETTING*>(
               &_C_ROOM_SETTING_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(C_ROOM_SETTING& a, C_ROOM_SETTING& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_SETTING* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_SETTING* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ROOM_SETTING* New() const final {
    return new C_ROOM_SETTING();
  }

  C_ROOM_SETTING* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ROOM_SETTING>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ROOM_SETTING& from);
  void MergeFrom(const C_ROOM_SETTING& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_SETTING* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOM_SETTING";
  }
  protected:
  explicit C_ROOM_SETTING(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kMaxPlayerCountFieldNumber = 3,
    kIsPrivateFieldNumber = 4,
    kIsTeamFieldNumber = 5,
    kMapFieldNumber = 6,
  };
  // string roomName = 1;
  void clear_roomname();
  const std::string& roomname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 maxPlayerCount = 3;
  void clear_maxplayercount();
  ::PROTOBUF_NAMESPACE_ID::int32 maxplayercount() const;
  void set_maxplayercount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxplayercount() const;
  void _internal_set_maxplayercount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isPrivate = 4;
  void clear_isprivate();
  bool isprivate() const;
  void set_isprivate(bool value);
  private:
  bool _internal_isprivate() const;
  void _internal_set_isprivate(bool value);
  public:

  // bool isTeam = 5;
  void clear_isteam();
  bool isteam() const;
  void set_isteam(bool value);
  private:
  bool _internal_isteam() const;
  void _internal_set_isteam(bool value);
  public:

  // int32 map = 6;
  void clear_map();
  ::PROTOBUF_NAMESPACE_ID::int32 map() const;
  void set_map(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map() const;
  void _internal_set_map(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOM_SETTING)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxplayercount_;
  bool isprivate_;
  bool isteam_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_ENTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOM_ENTER) */ {
 public:
  inline C_ROOM_ENTER() : C_ROOM_ENTER(nullptr) {}
  ~C_ROOM_ENTER() override;
  explicit constexpr C_ROOM_ENTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_ENTER(const C_ROOM_ENTER& from);
  C_ROOM_ENTER(C_ROOM_ENTER&& from) noexcept
    : C_ROOM_ENTER() {
    *this = ::std::move(from);
  }

  inline C_ROOM_ENTER& operator=(const C_ROOM_ENTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_ENTER& operator=(C_ROOM_ENTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_ENTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_ENTER* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_ENTER*>(
               &_C_ROOM_ENTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C_ROOM_ENTER& a, C_ROOM_ENTER& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_ENTER* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_ENTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ROOM_ENTER* New() const final {
    return new C_ROOM_ENTER();
  }

  C_ROOM_ENTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ROOM_ENTER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ROOM_ENTER& from);
  void MergeFrom(const C_ROOM_ENTER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_ENTER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOM_ENTER";
  }
  protected:
  explicit C_ROOM_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomCodeFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string roomCode = 1;
  void clear_roomcode();
  const std::string& roomcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomcode();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_roomcode();
  void set_allocated_roomcode(std::string* roomcode);
  private:
  const std::string& _internal_roomcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomcode(const std::string& value);
  std::string* _internal_mutable_roomcode();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOM_ENTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_ENTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOM_ENTER) */ {
 public:
  inline S_ROOM_ENTER() : S_ROOM_ENTER(nullptr) {}
  ~S_ROOM_ENTER() override;
  explicit constexpr S_ROOM_ENTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_ENTER(const S_ROOM_ENTER& from);
  S_ROOM_ENTER(S_ROOM_ENTER&& from) noexcept
    : S_ROOM_ENTER() {
    *this = ::std::move(from);
  }

  inline S_ROOM_ENTER& operator=(const S_ROOM_ENTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_ENTER& operator=(S_ROOM_ENTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_ENTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_ENTER* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_ENTER*>(
               &_S_ROOM_ENTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_ROOM_ENTER& a, S_ROOM_ENTER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_ENTER* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_ENTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ROOM_ENTER* New() const final {
    return new S_ROOM_ENTER();
  }

  S_ROOM_ENTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ROOM_ENTER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ROOM_ENTER& from);
  void MergeFrom(const S_ROOM_ENTER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_ENTER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOM_ENTER";
  }
  protected:
  explicit S_ROOM_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 1,
  };
  // .Protocol.RoomInfo roomInfo = 1;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::Protocol::RoomInfo& roominfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoomInfo* release_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::Protocol::RoomInfo* roominfo);
  private:
  const ::Protocol::RoomInfo& _internal_roominfo() const;
  ::Protocol::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::Protocol::RoomInfo* roominfo);
  ::Protocol::RoomInfo* unsafe_arena_release_roominfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOM_ENTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::RoomInfo* roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_LEAVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOM_LEAVE) */ {
 public:
  inline C_ROOM_LEAVE() : C_ROOM_LEAVE(nullptr) {}
  ~C_ROOM_LEAVE() override;
  explicit constexpr C_ROOM_LEAVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_LEAVE(const C_ROOM_LEAVE& from);
  C_ROOM_LEAVE(C_ROOM_LEAVE&& from) noexcept
    : C_ROOM_LEAVE() {
    *this = ::std::move(from);
  }

  inline C_ROOM_LEAVE& operator=(const C_ROOM_LEAVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_LEAVE& operator=(C_ROOM_LEAVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_LEAVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_LEAVE* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_LEAVE*>(
               &_C_ROOM_LEAVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(C_ROOM_LEAVE& a, C_ROOM_LEAVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_LEAVE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_LEAVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ROOM_LEAVE* New() const final {
    return new C_ROOM_LEAVE();
  }

  C_ROOM_LEAVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ROOM_LEAVE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ROOM_LEAVE& from);
  void MergeFrom(const C_ROOM_LEAVE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_LEAVE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOM_LEAVE";
  }
  protected:
  explicit C_ROOM_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOM_LEAVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_LEAVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOM_LEAVE) */ {
 public:
  inline S_ROOM_LEAVE() : S_ROOM_LEAVE(nullptr) {}
  ~S_ROOM_LEAVE() override;
  explicit constexpr S_ROOM_LEAVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_LEAVE(const S_ROOM_LEAVE& from);
  S_ROOM_LEAVE(S_ROOM_LEAVE&& from) noexcept
    : S_ROOM_LEAVE() {
    *this = ::std::move(from);
  }

  inline S_ROOM_LEAVE& operator=(const S_ROOM_LEAVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_LEAVE& operator=(S_ROOM_LEAVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_LEAVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_LEAVE* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_LEAVE*>(
               &_S_ROOM_LEAVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_ROOM_LEAVE& a, S_ROOM_LEAVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_LEAVE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_LEAVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ROOM_LEAVE* New() const final {
    return new S_ROOM_LEAVE();
  }

  S_ROOM_LEAVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ROOM_LEAVE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ROOM_LEAVE& from);
  void MergeFrom(const S_ROOM_LEAVE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_LEAVE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOM_LEAVE";
  }
  protected:
  explicit S_ROOM_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 1,
  };
  // .Protocol.RoomInfo roomInfo = 1;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::Protocol::RoomInfo& roominfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoomInfo* release_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::Protocol::RoomInfo* roominfo);
  private:
  const ::Protocol::RoomInfo& _internal_roominfo() const;
  ::Protocol::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::Protocol::RoomInfo* roominfo);
  ::Protocol::RoomInfo* unsafe_arena_release_roominfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOM_LEAVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::RoomInfo* roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ANOTHER_ENTER_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ANOTHER_ENTER_ROOM) */ {
 public:
  inline S_ANOTHER_ENTER_ROOM() : S_ANOTHER_ENTER_ROOM(nullptr) {}
  ~S_ANOTHER_ENTER_ROOM() override;
  explicit constexpr S_ANOTHER_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ANOTHER_ENTER_ROOM(const S_ANOTHER_ENTER_ROOM& from);
  S_ANOTHER_ENTER_ROOM(S_ANOTHER_ENTER_ROOM&& from) noexcept
    : S_ANOTHER_ENTER_ROOM() {
    *this = ::std::move(from);
  }

  inline S_ANOTHER_ENTER_ROOM& operator=(const S_ANOTHER_ENTER_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ANOTHER_ENTER_ROOM& operator=(S_ANOTHER_ENTER_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ANOTHER_ENTER_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ANOTHER_ENTER_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_ANOTHER_ENTER_ROOM*>(
               &_S_ANOTHER_ENTER_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(S_ANOTHER_ENTER_ROOM& a, S_ANOTHER_ENTER_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ANOTHER_ENTER_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ANOTHER_ENTER_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ANOTHER_ENTER_ROOM* New() const final {
    return new S_ANOTHER_ENTER_ROOM();
  }

  S_ANOTHER_ENTER_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ANOTHER_ENTER_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ANOTHER_ENTER_ROOM& from);
  void MergeFrom(const S_ANOTHER_ENTER_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ANOTHER_ENTER_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ANOTHER_ENTER_ROOM";
  }
  protected:
  explicit S_ANOTHER_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 1,
  };
  // .Protocol.RoomInfo roomInfo = 1;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::Protocol::RoomInfo& roominfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoomInfo* release_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::Protocol::RoomInfo* roominfo);
  private:
  const ::Protocol::RoomInfo& _internal_roominfo() const;
  ::Protocol::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::Protocol::RoomInfo* roominfo);
  ::Protocol::RoomInfo* unsafe_arena_release_roominfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_ANOTHER_ENTER_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::RoomInfo* roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ANOTHER_LEAVE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ANOTHER_LEAVE_ROOM) */ {
 public:
  inline S_ANOTHER_LEAVE_ROOM() : S_ANOTHER_LEAVE_ROOM(nullptr) {}
  ~S_ANOTHER_LEAVE_ROOM() override;
  explicit constexpr S_ANOTHER_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ANOTHER_LEAVE_ROOM(const S_ANOTHER_LEAVE_ROOM& from);
  S_ANOTHER_LEAVE_ROOM(S_ANOTHER_LEAVE_ROOM&& from) noexcept
    : S_ANOTHER_LEAVE_ROOM() {
    *this = ::std::move(from);
  }

  inline S_ANOTHER_LEAVE_ROOM& operator=(const S_ANOTHER_LEAVE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ANOTHER_LEAVE_ROOM& operator=(S_ANOTHER_LEAVE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ANOTHER_LEAVE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ANOTHER_LEAVE_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_ANOTHER_LEAVE_ROOM*>(
               &_S_ANOTHER_LEAVE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S_ANOTHER_LEAVE_ROOM& a, S_ANOTHER_LEAVE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ANOTHER_LEAVE_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ANOTHER_LEAVE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ANOTHER_LEAVE_ROOM* New() const final {
    return new S_ANOTHER_LEAVE_ROOM();
  }

  S_ANOTHER_LEAVE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ANOTHER_LEAVE_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ANOTHER_LEAVE_ROOM& from);
  void MergeFrom(const S_ANOTHER_LEAVE_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ANOTHER_LEAVE_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ANOTHER_LEAVE_ROOM";
  }
  protected:
  explicit S_ANOTHER_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 1,
  };
  // .Protocol.RoomInfo roomInfo = 1;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::Protocol::RoomInfo& roominfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoomInfo* release_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::Protocol::RoomInfo* roominfo);
  private:
  const ::Protocol::RoomInfo& _internal_roominfo() const;
  ::Protocol::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::Protocol::RoomInfo* roominfo);
  ::Protocol::RoomInfo* unsafe_arena_release_roominfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_ANOTHER_LEAVE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::RoomInfo* roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_START final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOM_START) */ {
 public:
  inline C_ROOM_START() : C_ROOM_START(nullptr) {}
  ~C_ROOM_START() override;
  explicit constexpr C_ROOM_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_START(const C_ROOM_START& from);
  C_ROOM_START(C_ROOM_START&& from) noexcept
    : C_ROOM_START() {
    *this = ::std::move(from);
  }

  inline C_ROOM_START& operator=(const C_ROOM_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_START& operator=(C_ROOM_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_START* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_START*>(
               &_C_ROOM_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C_ROOM_START& a, C_ROOM_START& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_START* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ROOM_START* New() const final {
    return new C_ROOM_START();
  }

  C_ROOM_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ROOM_START>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ROOM_START& from);
  void MergeFrom(const C_ROOM_START& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_START* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOM_START";
  }
  protected:
  explicit C_ROOM_START(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOM_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_START final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOM_START) */ {
 public:
  inline S_ROOM_START() : S_ROOM_START(nullptr) {}
  ~S_ROOM_START() override;
  explicit constexpr S_ROOM_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_START(const S_ROOM_START& from);
  S_ROOM_START(S_ROOM_START&& from) noexcept
    : S_ROOM_START() {
    *this = ::std::move(from);
  }

  inline S_ROOM_START& operator=(const S_ROOM_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_START& operator=(S_ROOM_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_START* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_START*>(
               &_S_ROOM_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S_ROOM_START& a, S_ROOM_START& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_START* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ROOM_START* New() const final {
    return new S_ROOM_START();
  }

  S_ROOM_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ROOM_START>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ROOM_START& from);
  void MergeFrom(const S_ROOM_START& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_START* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOM_START";
  }
  protected:
  explicit S_ROOM_START(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 1,
    kGameRuleFieldNumber = 2,
    kSpawnPointIndexFieldNumber = 3,
  };
  // .Protocol.RoomInfo roomInfo = 1;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::Protocol::RoomInfo& roominfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoomInfo* release_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::Protocol::RoomInfo* roominfo);
  private:
  const ::Protocol::RoomInfo& _internal_roominfo() const;
  ::Protocol::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::Protocol::RoomInfo* roominfo);
  ::Protocol::RoomInfo* unsafe_arena_release_roominfo();

  // .Protocol.GameRule gameRule = 2;
  bool has_gamerule() const;
  private:
  bool _internal_has_gamerule() const;
  public:
  void clear_gamerule();
  const ::Protocol::GameRule& gamerule() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::GameRule* release_gamerule();
  ::Protocol::GameRule* mutable_gamerule();
  void set_allocated_gamerule(::Protocol::GameRule* gamerule);
  private:
  const ::Protocol::GameRule& _internal_gamerule() const;
  ::Protocol::GameRule* _internal_mutable_gamerule();
  public:
  void unsafe_arena_set_allocated_gamerule(
      ::Protocol::GameRule* gamerule);
  ::Protocol::GameRule* unsafe_arena_release_gamerule();

  // int32 spawnPointIndex = 3;
  void clear_spawnpointindex();
  ::PROTOBUF_NAMESPACE_ID::int32 spawnpointindex() const;
  void set_spawnpointindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spawnpointindex() const;
  void _internal_set_spawnpointindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOM_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::RoomInfo* roominfo_;
  ::Protocol::GameRule* gamerule_;
  ::PROTOBUF_NAMESPACE_ID::int32 spawnpointindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_GAME_START final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_GAME_START) */ {
 public:
  inline S_GAME_START() : S_GAME_START(nullptr) {}
  ~S_GAME_START() override;
  explicit constexpr S_GAME_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_GAME_START(const S_GAME_START& from);
  S_GAME_START(S_GAME_START&& from) noexcept
    : S_GAME_START() {
    *this = ::std::move(from);
  }

  inline S_GAME_START& operator=(const S_GAME_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_GAME_START& operator=(S_GAME_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_GAME_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_GAME_START* internal_default_instance() {
    return reinterpret_cast<const S_GAME_START*>(
               &_S_GAME_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(S_GAME_START& a, S_GAME_START& b) {
    a.Swap(&b);
  }
  inline void Swap(S_GAME_START* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_GAME_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_GAME_START* New() const final {
    return new S_GAME_START();
  }

  S_GAME_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_GAME_START>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_GAME_START& from);
  void MergeFrom(const S_GAME_START& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_GAME_START* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_GAME_START";
  }
  protected:
  explicit S_GAME_START(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_GAME_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_GAME_END final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_GAME_END) */ {
 public:
  inline S_GAME_END() : S_GAME_END(nullptr) {}
  ~S_GAME_END() override;
  explicit constexpr S_GAME_END(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_GAME_END(const S_GAME_END& from);
  S_GAME_END(S_GAME_END&& from) noexcept
    : S_GAME_END() {
    *this = ::std::move(from);
  }

  inline S_GAME_END& operator=(const S_GAME_END& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_GAME_END& operator=(S_GAME_END&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_GAME_END& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_GAME_END* internal_default_instance() {
    return reinterpret_cast<const S_GAME_END*>(
               &_S_GAME_END_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S_GAME_END& a, S_GAME_END& b) {
    a.Swap(&b);
  }
  inline void Swap(S_GAME_END* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_GAME_END* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_GAME_END* New() const final {
    return new S_GAME_END();
  }

  S_GAME_END* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_GAME_END>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_GAME_END& from);
  void MergeFrom(const S_GAME_END& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_GAME_END* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_GAME_END";
  }
  protected:
  explicit S_GAME_END(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 1,
  };
  // .Protocol.RoomInfo roomInfo = 1;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::Protocol::RoomInfo& roominfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoomInfo* release_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::Protocol::RoomInfo* roominfo);
  private:
  const ::Protocol::RoomInfo& _internal_roominfo() const;
  ::Protocol::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::Protocol::RoomInfo* roominfo);
  ::Protocol::RoomInfo* unsafe_arena_release_roominfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_GAME_END)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::RoomInfo* roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_CHANGE_TEAM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOM_CHANGE_TEAM) */ {
 public:
  inline C_ROOM_CHANGE_TEAM() : C_ROOM_CHANGE_TEAM(nullptr) {}
  ~C_ROOM_CHANGE_TEAM() override;
  explicit constexpr C_ROOM_CHANGE_TEAM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_CHANGE_TEAM(const C_ROOM_CHANGE_TEAM& from);
  C_ROOM_CHANGE_TEAM(C_ROOM_CHANGE_TEAM&& from) noexcept
    : C_ROOM_CHANGE_TEAM() {
    *this = ::std::move(from);
  }

  inline C_ROOM_CHANGE_TEAM& operator=(const C_ROOM_CHANGE_TEAM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_CHANGE_TEAM& operator=(C_ROOM_CHANGE_TEAM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_CHANGE_TEAM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_CHANGE_TEAM* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_CHANGE_TEAM*>(
               &_C_ROOM_CHANGE_TEAM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(C_ROOM_CHANGE_TEAM& a, C_ROOM_CHANGE_TEAM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_CHANGE_TEAM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_CHANGE_TEAM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ROOM_CHANGE_TEAM* New() const final {
    return new C_ROOM_CHANGE_TEAM();
  }

  C_ROOM_CHANGE_TEAM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ROOM_CHANGE_TEAM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ROOM_CHANGE_TEAM& from);
  void MergeFrom(const C_ROOM_CHANGE_TEAM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_CHANGE_TEAM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOM_CHANGE_TEAM";
  }
  protected:
  explicit C_ROOM_CHANGE_TEAM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetNickNameFieldNumber = 2,
    kTeamColorFieldNumber = 1,
  };
  // string targetNickName = 2;
  void clear_targetnickname();
  const std::string& targetnickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetnickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetnickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_targetnickname();
  void set_allocated_targetnickname(std::string* targetnickname);
  private:
  const std::string& _internal_targetnickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetnickname(const std::string& value);
  std::string* _internal_mutable_targetnickname();
  public:

  // .Protocol.eTeamColor teamColor = 1;
  void clear_teamcolor();
  ::Protocol::eTeamColor teamcolor() const;
  void set_teamcolor(::Protocol::eTeamColor value);
  private:
  ::Protocol::eTeamColor _internal_teamcolor() const;
  void _internal_set_teamcolor(::Protocol::eTeamColor value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOM_CHANGE_TEAM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetnickname_;
  int teamcolor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_CHANGE_TEAM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOM_CHANGE_TEAM) */ {
 public:
  inline S_ROOM_CHANGE_TEAM() : S_ROOM_CHANGE_TEAM(nullptr) {}
  ~S_ROOM_CHANGE_TEAM() override;
  explicit constexpr S_ROOM_CHANGE_TEAM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_CHANGE_TEAM(const S_ROOM_CHANGE_TEAM& from);
  S_ROOM_CHANGE_TEAM(S_ROOM_CHANGE_TEAM&& from) noexcept
    : S_ROOM_CHANGE_TEAM() {
    *this = ::std::move(from);
  }

  inline S_ROOM_CHANGE_TEAM& operator=(const S_ROOM_CHANGE_TEAM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_CHANGE_TEAM& operator=(S_ROOM_CHANGE_TEAM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_CHANGE_TEAM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_CHANGE_TEAM* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_CHANGE_TEAM*>(
               &_S_ROOM_CHANGE_TEAM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(S_ROOM_CHANGE_TEAM& a, S_ROOM_CHANGE_TEAM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_CHANGE_TEAM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_CHANGE_TEAM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ROOM_CHANGE_TEAM* New() const final {
    return new S_ROOM_CHANGE_TEAM();
  }

  S_ROOM_CHANGE_TEAM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ROOM_CHANGE_TEAM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ROOM_CHANGE_TEAM& from);
  void MergeFrom(const S_ROOM_CHANGE_TEAM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_CHANGE_TEAM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOM_CHANGE_TEAM";
  }
  protected:
  explicit S_ROOM_CHANGE_TEAM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 1,
  };
  // .Protocol.RoomInfo roomInfo = 1;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::Protocol::RoomInfo& roominfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoomInfo* release_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::Protocol::RoomInfo* roominfo);
  private:
  const ::Protocol::RoomInfo& _internal_roominfo() const;
  ::Protocol::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::Protocol::RoomInfo* roominfo);
  ::Protocol::RoomInfo* unsafe_arena_release_roominfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOM_CHANGE_TEAM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::RoomInfo* roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_KICK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOM_KICK) */ {
 public:
  inline C_ROOM_KICK() : C_ROOM_KICK(nullptr) {}
  ~C_ROOM_KICK() override;
  explicit constexpr C_ROOM_KICK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_KICK(const C_ROOM_KICK& from);
  C_ROOM_KICK(C_ROOM_KICK&& from) noexcept
    : C_ROOM_KICK() {
    *this = ::std::move(from);
  }

  inline C_ROOM_KICK& operator=(const C_ROOM_KICK& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_KICK& operator=(C_ROOM_KICK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_KICK& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_KICK* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_KICK*>(
               &_C_ROOM_KICK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(C_ROOM_KICK& a, C_ROOM_KICK& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_KICK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_KICK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ROOM_KICK* New() const final {
    return new C_ROOM_KICK();
  }

  C_ROOM_KICK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ROOM_KICK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ROOM_KICK& from);
  void MergeFrom(const C_ROOM_KICK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_KICK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOM_KICK";
  }
  protected:
  explicit C_ROOM_KICK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetNickNameFieldNumber = 1,
  };
  // string targetNickName = 1;
  void clear_targetnickname();
  const std::string& targetnickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetnickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetnickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_targetnickname();
  void set_allocated_targetnickname(std::string* targetnickname);
  private:
  const std::string& _internal_targetnickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetnickname(const std::string& value);
  std::string* _internal_mutable_targetnickname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOM_KICK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetnickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_KICK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOM_KICK) */ {
 public:
  inline S_ROOM_KICK() : S_ROOM_KICK(nullptr) {}
  ~S_ROOM_KICK() override;
  explicit constexpr S_ROOM_KICK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_KICK(const S_ROOM_KICK& from);
  S_ROOM_KICK(S_ROOM_KICK&& from) noexcept
    : S_ROOM_KICK() {
    *this = ::std::move(from);
  }

  inline S_ROOM_KICK& operator=(const S_ROOM_KICK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_KICK& operator=(S_ROOM_KICK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_KICK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_KICK* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_KICK*>(
               &_S_ROOM_KICK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(S_ROOM_KICK& a, S_ROOM_KICK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_KICK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_KICK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ROOM_KICK* New() const final {
    return new S_ROOM_KICK();
  }

  S_ROOM_KICK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ROOM_KICK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ROOM_KICK& from);
  void MergeFrom(const S_ROOM_KICK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_KICK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOM_KICK";
  }
  protected:
  explicit S_ROOM_KICK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 1,
  };
  // .Protocol.RoomInfo roomInfo = 1;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::Protocol::RoomInfo& roominfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoomInfo* release_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::Protocol::RoomInfo* roominfo);
  private:
  const ::Protocol::RoomInfo& _internal_roominfo() const;
  ::Protocol::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::Protocol::RoomInfo* roominfo);
  ::Protocol::RoomInfo* unsafe_arena_release_roominfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOM_KICK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::RoomInfo* roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAY_UPDATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PLAY_UPDATE) */ {
 public:
  inline C_PLAY_UPDATE() : C_PLAY_UPDATE(nullptr) {}
  ~C_PLAY_UPDATE() override;
  explicit constexpr C_PLAY_UPDATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAY_UPDATE(const C_PLAY_UPDATE& from);
  C_PLAY_UPDATE(C_PLAY_UPDATE&& from) noexcept
    : C_PLAY_UPDATE() {
    *this = ::std::move(from);
  }

  inline C_PLAY_UPDATE& operator=(const C_PLAY_UPDATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAY_UPDATE& operator=(C_PLAY_UPDATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAY_UPDATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAY_UPDATE* internal_default_instance() {
    return reinterpret_cast<const C_PLAY_UPDATE*>(
               &_C_PLAY_UPDATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(C_PLAY_UPDATE& a, C_PLAY_UPDATE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAY_UPDATE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAY_UPDATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_PLAY_UPDATE* New() const final {
    return new C_PLAY_UPDATE();
  }

  C_PLAY_UPDATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_PLAY_UPDATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_PLAY_UPDATE& from);
  void MergeFrom(const C_PLAY_UPDATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PLAY_UPDATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PLAY_UPDATE";
  }
  protected:
  explicit C_PLAY_UPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDataFieldNumber = 1,
  };
  // .Protocol.PlayerData playerData = 1;
  bool has_playerdata() const;
  private:
  bool _internal_has_playerdata() const;
  public:
  void clear_playerdata();
  const ::Protocol::PlayerData& playerdata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PlayerData* release_playerdata();
  ::Protocol::PlayerData* mutable_playerdata();
  void set_allocated_playerdata(::Protocol::PlayerData* playerdata);
  private:
  const ::Protocol::PlayerData& _internal_playerdata() const;
  ::Protocol::PlayerData* _internal_mutable_playerdata();
  public:
  void unsafe_arena_set_allocated_playerdata(
      ::Protocol::PlayerData* playerdata);
  ::Protocol::PlayerData* unsafe_arena_release_playerdata();

  // @@protoc_insertion_point(class_scope:Protocol.C_PLAY_UPDATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PlayerData* playerdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAY_UPDATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAY_UPDATE) */ {
 public:
  inline S_PLAY_UPDATE() : S_PLAY_UPDATE(nullptr) {}
  ~S_PLAY_UPDATE() override;
  explicit constexpr S_PLAY_UPDATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAY_UPDATE(const S_PLAY_UPDATE& from);
  S_PLAY_UPDATE(S_PLAY_UPDATE&& from) noexcept
    : S_PLAY_UPDATE() {
    *this = ::std::move(from);
  }

  inline S_PLAY_UPDATE& operator=(const S_PLAY_UPDATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAY_UPDATE& operator=(S_PLAY_UPDATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAY_UPDATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAY_UPDATE* internal_default_instance() {
    return reinterpret_cast<const S_PLAY_UPDATE*>(
               &_S_PLAY_UPDATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(S_PLAY_UPDATE& a, S_PLAY_UPDATE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAY_UPDATE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAY_UPDATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PLAY_UPDATE* New() const final {
    return new S_PLAY_UPDATE();
  }

  S_PLAY_UPDATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PLAY_UPDATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PLAY_UPDATE& from);
  void MergeFrom(const S_PLAY_UPDATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAY_UPDATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAY_UPDATE";
  }
  protected:
  explicit S_PLAY_UPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDataFieldNumber = 2,
    kRoomInfoFieldNumber = 1,
  };
  // repeated .Protocol.PlayerData playerData = 2;
  int playerdata_size() const;
  private:
  int _internal_playerdata_size() const;
  public:
  void clear_playerdata();
  ::Protocol::PlayerData* mutable_playerdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerData >*
      mutable_playerdata();
  private:
  const ::Protocol::PlayerData& _internal_playerdata(int index) const;
  ::Protocol::PlayerData* _internal_add_playerdata();
  public:
  const ::Protocol::PlayerData& playerdata(int index) const;
  ::Protocol::PlayerData* add_playerdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerData >&
      playerdata() const;

  // .Protocol.RoomInfo roomInfo = 1;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::Protocol::RoomInfo& roominfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::RoomInfo* release_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::Protocol::RoomInfo* roominfo);
  private:
  const ::Protocol::RoomInfo& _internal_roominfo() const;
  ::Protocol::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::Protocol::RoomInfo* roominfo);
  ::Protocol::RoomInfo* unsafe_arena_release_roominfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAY_UPDATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerData > playerdata_;
  ::Protocol::RoomInfo* roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_LIST_REQUEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOM_LIST_REQUEST) */ {
 public:
  inline C_ROOM_LIST_REQUEST() : C_ROOM_LIST_REQUEST(nullptr) {}
  ~C_ROOM_LIST_REQUEST() override;
  explicit constexpr C_ROOM_LIST_REQUEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_LIST_REQUEST(const C_ROOM_LIST_REQUEST& from);
  C_ROOM_LIST_REQUEST(C_ROOM_LIST_REQUEST&& from) noexcept
    : C_ROOM_LIST_REQUEST() {
    *this = ::std::move(from);
  }

  inline C_ROOM_LIST_REQUEST& operator=(const C_ROOM_LIST_REQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_LIST_REQUEST& operator=(C_ROOM_LIST_REQUEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_LIST_REQUEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_LIST_REQUEST* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_LIST_REQUEST*>(
               &_C_ROOM_LIST_REQUEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(C_ROOM_LIST_REQUEST& a, C_ROOM_LIST_REQUEST& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_LIST_REQUEST* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_LIST_REQUEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ROOM_LIST_REQUEST* New() const final {
    return new C_ROOM_LIST_REQUEST();
  }

  C_ROOM_LIST_REQUEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ROOM_LIST_REQUEST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ROOM_LIST_REQUEST& from);
  void MergeFrom(const C_ROOM_LIST_REQUEST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_LIST_REQUEST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOM_LIST_REQUEST";
  }
  protected:
  explicit C_ROOM_LIST_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOM_LIST_REQUEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_LIST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOM_LIST) */ {
 public:
  inline S_ROOM_LIST() : S_ROOM_LIST(nullptr) {}
  ~S_ROOM_LIST() override;
  explicit constexpr S_ROOM_LIST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_LIST(const S_ROOM_LIST& from);
  S_ROOM_LIST(S_ROOM_LIST&& from) noexcept
    : S_ROOM_LIST() {
    *this = ::std::move(from);
  }

  inline S_ROOM_LIST& operator=(const S_ROOM_LIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_LIST& operator=(S_ROOM_LIST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_LIST& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_LIST* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_LIST*>(
               &_S_ROOM_LIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(S_ROOM_LIST& a, S_ROOM_LIST& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_LIST* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_LIST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ROOM_LIST* New() const final {
    return new S_ROOM_LIST();
  }

  S_ROOM_LIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ROOM_LIST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ROOM_LIST& from);
  void MergeFrom(const S_ROOM_LIST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_LIST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOM_LIST";
  }
  protected:
  explicit S_ROOM_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 1,
  };
  // repeated .Protocol.RoomInfo roomInfo = 1;
  int roominfo_size() const;
  private:
  int _internal_roominfo_size() const;
  public:
  void clear_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomInfo >*
      mutable_roominfo();
  private:
  const ::Protocol::RoomInfo& _internal_roominfo(int index) const;
  ::Protocol::RoomInfo* _internal_add_roominfo();
  public:
  const ::Protocol::RoomInfo& roominfo(int index) const;
  ::Protocol::RoomInfo* add_roominfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomInfo >&
      roominfo() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOM_LIST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomInfo > roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAY_JUMP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PLAY_JUMP) */ {
 public:
  inline C_PLAY_JUMP() : C_PLAY_JUMP(nullptr) {}
  ~C_PLAY_JUMP() override;
  explicit constexpr C_PLAY_JUMP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAY_JUMP(const C_PLAY_JUMP& from);
  C_PLAY_JUMP(C_PLAY_JUMP&& from) noexcept
    : C_PLAY_JUMP() {
    *this = ::std::move(from);
  }

  inline C_PLAY_JUMP& operator=(const C_PLAY_JUMP& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAY_JUMP& operator=(C_PLAY_JUMP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAY_JUMP& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAY_JUMP* internal_default_instance() {
    return reinterpret_cast<const C_PLAY_JUMP*>(
               &_C_PLAY_JUMP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(C_PLAY_JUMP& a, C_PLAY_JUMP& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAY_JUMP* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAY_JUMP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_PLAY_JUMP* New() const final {
    return new C_PLAY_JUMP();
  }

  C_PLAY_JUMP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_PLAY_JUMP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_PLAY_JUMP& from);
  void MergeFrom(const C_PLAY_JUMP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PLAY_JUMP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PLAY_JUMP";
  }
  protected:
  explicit C_PLAY_JUMP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDataFieldNumber = 1,
  };
  // .Protocol.PlayerData playerData = 1;
  bool has_playerdata() const;
  private:
  bool _internal_has_playerdata() const;
  public:
  void clear_playerdata();
  const ::Protocol::PlayerData& playerdata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PlayerData* release_playerdata();
  ::Protocol::PlayerData* mutable_playerdata();
  void set_allocated_playerdata(::Protocol::PlayerData* playerdata);
  private:
  const ::Protocol::PlayerData& _internal_playerdata() const;
  ::Protocol::PlayerData* _internal_mutable_playerdata();
  public:
  void unsafe_arena_set_allocated_playerdata(
      ::Protocol::PlayerData* playerdata);
  ::Protocol::PlayerData* unsafe_arena_release_playerdata();

  // @@protoc_insertion_point(class_scope:Protocol.C_PLAY_JUMP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PlayerData* playerdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAY_JUMP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAY_JUMP) */ {
 public:
  inline S_PLAY_JUMP() : S_PLAY_JUMP(nullptr) {}
  ~S_PLAY_JUMP() override;
  explicit constexpr S_PLAY_JUMP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAY_JUMP(const S_PLAY_JUMP& from);
  S_PLAY_JUMP(S_PLAY_JUMP&& from) noexcept
    : S_PLAY_JUMP() {
    *this = ::std::move(from);
  }

  inline S_PLAY_JUMP& operator=(const S_PLAY_JUMP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAY_JUMP& operator=(S_PLAY_JUMP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAY_JUMP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAY_JUMP* internal_default_instance() {
    return reinterpret_cast<const S_PLAY_JUMP*>(
               &_S_PLAY_JUMP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(S_PLAY_JUMP& a, S_PLAY_JUMP& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAY_JUMP* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAY_JUMP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PLAY_JUMP* New() const final {
    return new S_PLAY_JUMP();
  }

  S_PLAY_JUMP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PLAY_JUMP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PLAY_JUMP& from);
  void MergeFrom(const S_PLAY_JUMP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAY_JUMP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAY_JUMP";
  }
  protected:
  explicit S_PLAY_JUMP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDataFieldNumber = 1,
  };
  // .Protocol.PlayerData playerData = 1;
  bool has_playerdata() const;
  private:
  bool _internal_has_playerdata() const;
  public:
  void clear_playerdata();
  const ::Protocol::PlayerData& playerdata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PlayerData* release_playerdata();
  ::Protocol::PlayerData* mutable_playerdata();
  void set_allocated_playerdata(::Protocol::PlayerData* playerdata);
  private:
  const ::Protocol::PlayerData& _internal_playerdata() const;
  ::Protocol::PlayerData* _internal_mutable_playerdata();
  public:
  void unsafe_arena_set_allocated_playerdata(
      ::Protocol::PlayerData* playerdata);
  ::Protocol::PlayerData* unsafe_arena_release_playerdata();

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAY_JUMP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PlayerData* playerdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAY_SHOOT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PLAY_SHOOT) */ {
 public:
  inline C_PLAY_SHOOT() : C_PLAY_SHOOT(nullptr) {}
  ~C_PLAY_SHOOT() override;
  explicit constexpr C_PLAY_SHOOT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAY_SHOOT(const C_PLAY_SHOOT& from);
  C_PLAY_SHOOT(C_PLAY_SHOOT&& from) noexcept
    : C_PLAY_SHOOT() {
    *this = ::std::move(from);
  }

  inline C_PLAY_SHOOT& operator=(const C_PLAY_SHOOT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAY_SHOOT& operator=(C_PLAY_SHOOT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAY_SHOOT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAY_SHOOT* internal_default_instance() {
    return reinterpret_cast<const C_PLAY_SHOOT*>(
               &_C_PLAY_SHOOT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(C_PLAY_SHOOT& a, C_PLAY_SHOOT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAY_SHOOT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAY_SHOOT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_PLAY_SHOOT* New() const final {
    return new C_PLAY_SHOOT();
  }

  C_PLAY_SHOOT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_PLAY_SHOOT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_PLAY_SHOOT& from);
  void MergeFrom(const C_PLAY_SHOOT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PLAY_SHOOT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PLAY_SHOOT";
  }
  protected:
  explicit C_PLAY_SHOOT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 1,
    kHitTargetUidFieldNumber = 2,
    kHitLocationFieldNumber = 3,
  };
  // .Protocol.Transform transform = 1;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Protocol::Transform& transform() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Transform* release_transform();
  ::Protocol::Transform* mutable_transform();
  void set_allocated_transform(::Protocol::Transform* transform);
  private:
  const ::Protocol::Transform& _internal_transform() const;
  ::Protocol::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Protocol::Transform* transform);
  ::Protocol::Transform* unsafe_arena_release_transform();

  // uint64 hitTargetUid = 2;
  void clear_hittargetuid();
  ::PROTOBUF_NAMESPACE_ID::uint64 hittargetuid() const;
  void set_hittargetuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hittargetuid() const;
  void _internal_set_hittargetuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .Protocol.eHitLocation hitLocation = 3;
  void clear_hitlocation();
  ::Protocol::eHitLocation hitlocation() const;
  void set_hitlocation(::Protocol::eHitLocation value);
  private:
  ::Protocol::eHitLocation _internal_hitlocation() const;
  void _internal_set_hitlocation(::Protocol::eHitLocation value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_PLAY_SHOOT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Transform* transform_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hittargetuid_;
  int hitlocation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAY_SHOOT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAY_SHOOT) */ {
 public:
  inline S_PLAY_SHOOT() : S_PLAY_SHOOT(nullptr) {}
  ~S_PLAY_SHOOT() override;
  explicit constexpr S_PLAY_SHOOT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAY_SHOOT(const S_PLAY_SHOOT& from);
  S_PLAY_SHOOT(S_PLAY_SHOOT&& from) noexcept
    : S_PLAY_SHOOT() {
    *this = ::std::move(from);
  }

  inline S_PLAY_SHOOT& operator=(const S_PLAY_SHOOT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAY_SHOOT& operator=(S_PLAY_SHOOT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAY_SHOOT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAY_SHOOT* internal_default_instance() {
    return reinterpret_cast<const S_PLAY_SHOOT*>(
               &_S_PLAY_SHOOT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(S_PLAY_SHOOT& a, S_PLAY_SHOOT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAY_SHOOT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAY_SHOOT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PLAY_SHOOT* New() const final {
    return new S_PLAY_SHOOT();
  }

  S_PLAY_SHOOT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PLAY_SHOOT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PLAY_SHOOT& from);
  void MergeFrom(const S_PLAY_SHOOT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAY_SHOOT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAY_SHOOT";
  }
  protected:
  explicit S_PLAY_SHOOT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShootPlayerFieldNumber = 1,
    kHitPlayerFieldNumber = 2,
    kHitLocationFieldNumber = 3,
  };
  // .Protocol.PlayerData shootPlayer = 1;
  bool has_shootplayer() const;
  private:
  bool _internal_has_shootplayer() const;
  public:
  void clear_shootplayer();
  const ::Protocol::PlayerData& shootplayer() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PlayerData* release_shootplayer();
  ::Protocol::PlayerData* mutable_shootplayer();
  void set_allocated_shootplayer(::Protocol::PlayerData* shootplayer);
  private:
  const ::Protocol::PlayerData& _internal_shootplayer() const;
  ::Protocol::PlayerData* _internal_mutable_shootplayer();
  public:
  void unsafe_arena_set_allocated_shootplayer(
      ::Protocol::PlayerData* shootplayer);
  ::Protocol::PlayerData* unsafe_arena_release_shootplayer();

  // optional .Protocol.PlayerData hitPlayer = 2;
  bool has_hitplayer() const;
  private:
  bool _internal_has_hitplayer() const;
  public:
  void clear_hitplayer();
  const ::Protocol::PlayerData& hitplayer() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PlayerData* release_hitplayer();
  ::Protocol::PlayerData* mutable_hitplayer();
  void set_allocated_hitplayer(::Protocol::PlayerData* hitplayer);
  private:
  const ::Protocol::PlayerData& _internal_hitplayer() const;
  ::Protocol::PlayerData* _internal_mutable_hitplayer();
  public:
  void unsafe_arena_set_allocated_hitplayer(
      ::Protocol::PlayerData* hitplayer);
  ::Protocol::PlayerData* unsafe_arena_release_hitplayer();

  // optional .Protocol.eHitLocation hitLocation = 3;
  bool has_hitlocation() const;
  private:
  bool _internal_has_hitlocation() const;
  public:
  void clear_hitlocation();
  ::Protocol::eHitLocation hitlocation() const;
  void set_hitlocation(::Protocol::eHitLocation value);
  private:
  ::Protocol::eHitLocation _internal_hitlocation() const;
  void _internal_set_hitlocation(::Protocol::eHitLocation value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAY_SHOOT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Protocol::PlayerData* shootplayer_;
  ::Protocol::PlayerData* hitplayer_;
  int hitlocation_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAY_KILL_DEATH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAY_KILL_DEATH) */ {
 public:
  inline S_PLAY_KILL_DEATH() : S_PLAY_KILL_DEATH(nullptr) {}
  ~S_PLAY_KILL_DEATH() override;
  explicit constexpr S_PLAY_KILL_DEATH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAY_KILL_DEATH(const S_PLAY_KILL_DEATH& from);
  S_PLAY_KILL_DEATH(S_PLAY_KILL_DEATH&& from) noexcept
    : S_PLAY_KILL_DEATH() {
    *this = ::std::move(from);
  }

  inline S_PLAY_KILL_DEATH& operator=(const S_PLAY_KILL_DEATH& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAY_KILL_DEATH& operator=(S_PLAY_KILL_DEATH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAY_KILL_DEATH& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAY_KILL_DEATH* internal_default_instance() {
    return reinterpret_cast<const S_PLAY_KILL_DEATH*>(
               &_S_PLAY_KILL_DEATH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(S_PLAY_KILL_DEATH& a, S_PLAY_KILL_DEATH& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAY_KILL_DEATH* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAY_KILL_DEATH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PLAY_KILL_DEATH* New() const final {
    return new S_PLAY_KILL_DEATH();
  }

  S_PLAY_KILL_DEATH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PLAY_KILL_DEATH>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PLAY_KILL_DEATH& from);
  void MergeFrom(const S_PLAY_KILL_DEATH& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAY_KILL_DEATH* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAY_KILL_DEATH";
  }
  protected:
  explicit S_PLAY_KILL_DEATH(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeathPlayerFieldNumber = 1,
    kKillPlayerFieldNumber = 2,
  };
  // .Protocol.PlayerData deathPlayer = 1;
  bool has_deathplayer() const;
  private:
  bool _internal_has_deathplayer() const;
  public:
  void clear_deathplayer();
  const ::Protocol::PlayerData& deathplayer() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PlayerData* release_deathplayer();
  ::Protocol::PlayerData* mutable_deathplayer();
  void set_allocated_deathplayer(::Protocol::PlayerData* deathplayer);
  private:
  const ::Protocol::PlayerData& _internal_deathplayer() const;
  ::Protocol::PlayerData* _internal_mutable_deathplayer();
  public:
  void unsafe_arena_set_allocated_deathplayer(
      ::Protocol::PlayerData* deathplayer);
  ::Protocol::PlayerData* unsafe_arena_release_deathplayer();

  // .Protocol.PlayerData killPlayer = 2;
  bool has_killplayer() const;
  private:
  bool _internal_has_killplayer() const;
  public:
  void clear_killplayer();
  const ::Protocol::PlayerData& killplayer() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PlayerData* release_killplayer();
  ::Protocol::PlayerData* mutable_killplayer();
  void set_allocated_killplayer(::Protocol::PlayerData* killplayer);
  private:
  const ::Protocol::PlayerData& _internal_killplayer() const;
  ::Protocol::PlayerData* _internal_mutable_killplayer();
  public:
  void unsafe_arena_set_allocated_killplayer(
      ::Protocol::PlayerData* killplayer);
  ::Protocol::PlayerData* unsafe_arena_release_killplayer();

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAY_KILL_DEATH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PlayerData* deathplayer_;
  ::Protocol::PlayerData* killplayer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAY_RESPAWN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAY_RESPAWN) */ {
 public:
  inline S_PLAY_RESPAWN() : S_PLAY_RESPAWN(nullptr) {}
  ~S_PLAY_RESPAWN() override;
  explicit constexpr S_PLAY_RESPAWN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAY_RESPAWN(const S_PLAY_RESPAWN& from);
  S_PLAY_RESPAWN(S_PLAY_RESPAWN&& from) noexcept
    : S_PLAY_RESPAWN() {
    *this = ::std::move(from);
  }

  inline S_PLAY_RESPAWN& operator=(const S_PLAY_RESPAWN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAY_RESPAWN& operator=(S_PLAY_RESPAWN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAY_RESPAWN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAY_RESPAWN* internal_default_instance() {
    return reinterpret_cast<const S_PLAY_RESPAWN*>(
               &_S_PLAY_RESPAWN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(S_PLAY_RESPAWN& a, S_PLAY_RESPAWN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAY_RESPAWN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAY_RESPAWN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PLAY_RESPAWN* New() const final {
    return new S_PLAY_RESPAWN();
  }

  S_PLAY_RESPAWN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PLAY_RESPAWN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PLAY_RESPAWN& from);
  void MergeFrom(const S_PLAY_RESPAWN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAY_RESPAWN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAY_RESPAWN";
  }
  protected:
  explicit S_PLAY_RESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDataFieldNumber = 1,
    kSpawnPointIndexFieldNumber = 2,
  };
  // .Protocol.PlayerData playerData = 1;
  bool has_playerdata() const;
  private:
  bool _internal_has_playerdata() const;
  public:
  void clear_playerdata();
  const ::Protocol::PlayerData& playerdata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PlayerData* release_playerdata();
  ::Protocol::PlayerData* mutable_playerdata();
  void set_allocated_playerdata(::Protocol::PlayerData* playerdata);
  private:
  const ::Protocol::PlayerData& _internal_playerdata() const;
  ::Protocol::PlayerData* _internal_mutable_playerdata();
  public:
  void unsafe_arena_set_allocated_playerdata(
      ::Protocol::PlayerData* playerdata);
  ::Protocol::PlayerData* unsafe_arena_release_playerdata();

  // int32 spawnPointIndex = 2;
  void clear_spawnpointindex();
  ::PROTOBUF_NAMESPACE_ID::int32 spawnpointindex() const;
  void set_spawnpointindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spawnpointindex() const;
  void _internal_set_spawnpointindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAY_RESPAWN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PlayerData* playerdata_;
  ::PROTOBUF_NAMESPACE_ID::int32 spawnpointindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAY_ROLL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PLAY_ROLL) */ {
 public:
  inline C_PLAY_ROLL() : C_PLAY_ROLL(nullptr) {}
  ~C_PLAY_ROLL() override;
  explicit constexpr C_PLAY_ROLL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAY_ROLL(const C_PLAY_ROLL& from);
  C_PLAY_ROLL(C_PLAY_ROLL&& from) noexcept
    : C_PLAY_ROLL() {
    *this = ::std::move(from);
  }

  inline C_PLAY_ROLL& operator=(const C_PLAY_ROLL& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAY_ROLL& operator=(C_PLAY_ROLL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAY_ROLL& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAY_ROLL* internal_default_instance() {
    return reinterpret_cast<const C_PLAY_ROLL*>(
               &_C_PLAY_ROLL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(C_PLAY_ROLL& a, C_PLAY_ROLL& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAY_ROLL* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAY_ROLL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_PLAY_ROLL* New() const final {
    return new C_PLAY_ROLL();
  }

  C_PLAY_ROLL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_PLAY_ROLL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_PLAY_ROLL& from);
  void MergeFrom(const C_PLAY_ROLL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PLAY_ROLL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PLAY_ROLL";
  }
  protected:
  explicit C_PLAY_ROLL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDataFieldNumber = 1,
  };
  // .Protocol.PlayerData playerData = 1;
  bool has_playerdata() const;
  private:
  bool _internal_has_playerdata() const;
  public:
  void clear_playerdata();
  const ::Protocol::PlayerData& playerdata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PlayerData* release_playerdata();
  ::Protocol::PlayerData* mutable_playerdata();
  void set_allocated_playerdata(::Protocol::PlayerData* playerdata);
  private:
  const ::Protocol::PlayerData& _internal_playerdata() const;
  ::Protocol::PlayerData* _internal_mutable_playerdata();
  public:
  void unsafe_arena_set_allocated_playerdata(
      ::Protocol::PlayerData* playerdata);
  ::Protocol::PlayerData* unsafe_arena_release_playerdata();

  // @@protoc_insertion_point(class_scope:Protocol.C_PLAY_ROLL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PlayerData* playerdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAY_ROLL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAY_ROLL) */ {
 public:
  inline S_PLAY_ROLL() : S_PLAY_ROLL(nullptr) {}
  ~S_PLAY_ROLL() override;
  explicit constexpr S_PLAY_ROLL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAY_ROLL(const S_PLAY_ROLL& from);
  S_PLAY_ROLL(S_PLAY_ROLL&& from) noexcept
    : S_PLAY_ROLL() {
    *this = ::std::move(from);
  }

  inline S_PLAY_ROLL& operator=(const S_PLAY_ROLL& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAY_ROLL& operator=(S_PLAY_ROLL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAY_ROLL& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAY_ROLL* internal_default_instance() {
    return reinterpret_cast<const S_PLAY_ROLL*>(
               &_S_PLAY_ROLL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(S_PLAY_ROLL& a, S_PLAY_ROLL& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAY_ROLL* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAY_ROLL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PLAY_ROLL* New() const final {
    return new S_PLAY_ROLL();
  }

  S_PLAY_ROLL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PLAY_ROLL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PLAY_ROLL& from);
  void MergeFrom(const S_PLAY_ROLL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAY_ROLL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAY_ROLL";
  }
  protected:
  explicit S_PLAY_ROLL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDataFieldNumber = 1,
  };
  // .Protocol.PlayerData playerData = 1;
  bool has_playerdata() const;
  private:
  bool _internal_has_playerdata() const;
  public:
  void clear_playerdata();
  const ::Protocol::PlayerData& playerdata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PlayerData* release_playerdata();
  ::Protocol::PlayerData* mutable_playerdata();
  void set_allocated_playerdata(::Protocol::PlayerData* playerdata);
  private:
  const ::Protocol::PlayerData& _internal_playerdata() const;
  ::Protocol::PlayerData* _internal_mutable_playerdata();
  public:
  void unsafe_arena_set_allocated_playerdata(
      ::Protocol::PlayerData* playerdata);
  ::Protocol::PlayerData* unsafe_arena_release_playerdata();

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAY_ROLL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PlayerData* playerdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAY_RELOAD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PLAY_RELOAD) */ {
 public:
  inline C_PLAY_RELOAD() : C_PLAY_RELOAD(nullptr) {}
  ~C_PLAY_RELOAD() override;
  explicit constexpr C_PLAY_RELOAD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAY_RELOAD(const C_PLAY_RELOAD& from);
  C_PLAY_RELOAD(C_PLAY_RELOAD&& from) noexcept
    : C_PLAY_RELOAD() {
    *this = ::std::move(from);
  }

  inline C_PLAY_RELOAD& operator=(const C_PLAY_RELOAD& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAY_RELOAD& operator=(C_PLAY_RELOAD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAY_RELOAD& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAY_RELOAD* internal_default_instance() {
    return reinterpret_cast<const C_PLAY_RELOAD*>(
               &_C_PLAY_RELOAD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(C_PLAY_RELOAD& a, C_PLAY_RELOAD& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAY_RELOAD* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAY_RELOAD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_PLAY_RELOAD* New() const final {
    return new C_PLAY_RELOAD();
  }

  C_PLAY_RELOAD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_PLAY_RELOAD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_PLAY_RELOAD& from);
  void MergeFrom(const C_PLAY_RELOAD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PLAY_RELOAD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PLAY_RELOAD";
  }
  protected:
  explicit C_PLAY_RELOAD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDataFieldNumber = 1,
  };
  // .Protocol.PlayerData playerData = 1;
  bool has_playerdata() const;
  private:
  bool _internal_has_playerdata() const;
  public:
  void clear_playerdata();
  const ::Protocol::PlayerData& playerdata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PlayerData* release_playerdata();
  ::Protocol::PlayerData* mutable_playerdata();
  void set_allocated_playerdata(::Protocol::PlayerData* playerdata);
  private:
  const ::Protocol::PlayerData& _internal_playerdata() const;
  ::Protocol::PlayerData* _internal_mutable_playerdata();
  public:
  void unsafe_arena_set_allocated_playerdata(
      ::Protocol::PlayerData* playerdata);
  ::Protocol::PlayerData* unsafe_arena_release_playerdata();

  // @@protoc_insertion_point(class_scope:Protocol.C_PLAY_RELOAD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PlayerData* playerdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAY_RELOAD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAY_RELOAD) */ {
 public:
  inline S_PLAY_RELOAD() : S_PLAY_RELOAD(nullptr) {}
  ~S_PLAY_RELOAD() override;
  explicit constexpr S_PLAY_RELOAD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAY_RELOAD(const S_PLAY_RELOAD& from);
  S_PLAY_RELOAD(S_PLAY_RELOAD&& from) noexcept
    : S_PLAY_RELOAD() {
    *this = ::std::move(from);
  }

  inline S_PLAY_RELOAD& operator=(const S_PLAY_RELOAD& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAY_RELOAD& operator=(S_PLAY_RELOAD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAY_RELOAD& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAY_RELOAD* internal_default_instance() {
    return reinterpret_cast<const S_PLAY_RELOAD*>(
               &_S_PLAY_RELOAD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(S_PLAY_RELOAD& a, S_PLAY_RELOAD& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAY_RELOAD* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAY_RELOAD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PLAY_RELOAD* New() const final {
    return new S_PLAY_RELOAD();
  }

  S_PLAY_RELOAD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PLAY_RELOAD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PLAY_RELOAD& from);
  void MergeFrom(const S_PLAY_RELOAD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAY_RELOAD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAY_RELOAD";
  }
  protected:
  explicit S_PLAY_RELOAD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDataFieldNumber = 1,
  };
  // .Protocol.PlayerData playerData = 1;
  bool has_playerdata() const;
  private:
  bool _internal_has_playerdata() const;
  public:
  void clear_playerdata();
  const ::Protocol::PlayerData& playerdata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PlayerData* release_playerdata();
  ::Protocol::PlayerData* mutable_playerdata();
  void set_allocated_playerdata(::Protocol::PlayerData* playerdata);
  private:
  const ::Protocol::PlayerData& _internal_playerdata() const;
  ::Protocol::PlayerData* _internal_mutable_playerdata();
  public:
  void unsafe_arena_set_allocated_playerdata(
      ::Protocol::PlayerData* playerdata);
  ::Protocol::PlayerData* unsafe_arena_release_playerdata();

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAY_RELOAD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PlayerData* playerdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOM_CHAT) */ {
 public:
  inline C_ROOM_CHAT() : C_ROOM_CHAT(nullptr) {}
  ~C_ROOM_CHAT() override;
  explicit constexpr C_ROOM_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_CHAT(const C_ROOM_CHAT& from);
  C_ROOM_CHAT(C_ROOM_CHAT&& from) noexcept
    : C_ROOM_CHAT() {
    *this = ::std::move(from);
  }

  inline C_ROOM_CHAT& operator=(const C_ROOM_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_CHAT& operator=(C_ROOM_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_CHAT*>(
               &_C_ROOM_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(C_ROOM_CHAT& a, C_ROOM_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_CHAT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ROOM_CHAT* New() const final {
    return new C_ROOM_CHAT();
  }

  C_ROOM_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ROOM_CHAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ROOM_CHAT& from);
  void MergeFrom(const C_ROOM_CHAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_CHAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOM_CHAT";
  }
  protected:
  explicit C_ROOM_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatFieldNumber = 1,
  };
  // string chat = 1;
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOM_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOM_CHAT) */ {
 public:
  inline S_ROOM_CHAT() : S_ROOM_CHAT(nullptr) {}
  ~S_ROOM_CHAT() override;
  explicit constexpr S_ROOM_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_CHAT(const S_ROOM_CHAT& from);
  S_ROOM_CHAT(S_ROOM_CHAT&& from) noexcept
    : S_ROOM_CHAT() {
    *this = ::std::move(from);
  }

  inline S_ROOM_CHAT& operator=(const S_ROOM_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_CHAT& operator=(S_ROOM_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_CHAT*>(
               &_S_ROOM_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(S_ROOM_CHAT& a, S_ROOM_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_CHAT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ROOM_CHAT* New() const final {
    return new S_ROOM_CHAT();
  }

  S_ROOM_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ROOM_CHAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ROOM_CHAT& from);
  void MergeFrom(const S_ROOM_CHAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_CHAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOM_CHAT";
  }
  protected:
  explicit S_ROOM_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 1,
    kChatFieldNumber = 2,
  };
  // string nickName = 1;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string chat = 2;
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOM_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_TEST

// int64 num = 1;
inline void C_TEST::clear_num() {
  num_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C_TEST::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C_TEST::num() const {
  // @@protoc_insertion_point(field_get:Protocol.C_TEST.num)
  return _internal_num();
}
inline void C_TEST::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_ = value;
}
inline void C_TEST::set_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:Protocol.C_TEST.num)
}

// -------------------------------------------------------------------

// S_TEST

// int64 num = 1;
inline void S_TEST::clear_num() {
  num_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_TEST::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_TEST::num() const {
  // @@protoc_insertion_point(field_get:Protocol.S_TEST.num)
  return _internal_num();
}
inline void S_TEST::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_ = value;
}
inline void S_TEST::set_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:Protocol.S_TEST.num)
}

// -------------------------------------------------------------------

// C_MOVE

// uint64 id = 1;
inline void C_MOVE::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_MOVE::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_MOVE::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.id)
  return _internal_id();
}
inline void C_MOVE::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void C_MOVE::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MOVE.id)
}

// uint32 pos = 2;
inline void C_MOVE::clear_pos() {
  pos_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_MOVE::_internal_pos() const {
  return pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_MOVE::pos() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.pos)
  return _internal_pos();
}
inline void C_MOVE::_internal_set_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pos_ = value;
}
inline void C_MOVE::set_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MOVE.pos)
}

// -------------------------------------------------------------------

// S_ERROR

// int32 errorCode = 1;
inline void S_ERROR::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ERROR::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ERROR::errorcode() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ERROR.errorCode)
  return _internal_errorcode();
}
inline void S_ERROR::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void S_ERROR::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ERROR.errorCode)
}

// -------------------------------------------------------------------

// S_CONNECTED

// -------------------------------------------------------------------

// C_AUTOLOGIN

// -------------------------------------------------------------------

// C_SIGNIN

// string id = 1;
inline void C_SIGNIN::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& C_SIGNIN::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SIGNIN.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SIGNIN::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_SIGNIN.id)
}
inline std::string* C_SIGNIN::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_SIGNIN.id)
  return _internal_mutable_id();
}
inline const std::string& C_SIGNIN::_internal_id() const {
  return id_.Get();
}
inline void C_SIGNIN::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_SIGNIN::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_SIGNIN::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_SIGNIN.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_SIGNIN::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SIGNIN.id)
}

// string password = 2;
inline void C_SIGNIN::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& C_SIGNIN::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SIGNIN.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SIGNIN::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_SIGNIN.password)
}
inline std::string* C_SIGNIN::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_SIGNIN.password)
  return _internal_mutable_password();
}
inline const std::string& C_SIGNIN::_internal_password() const {
  return password_.Get();
}
inline void C_SIGNIN::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_SIGNIN::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_SIGNIN::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C_SIGNIN.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_SIGNIN::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SIGNIN.password)
}

// -------------------------------------------------------------------

// S_SIGNIN_OK

// int32 uid = 1;
inline void S_SIGNIN_OK::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SIGNIN_OK::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SIGNIN_OK::uid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SIGNIN_OK.uid)
  return _internal_uid();
}
inline void S_SIGNIN_OK::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void S_SIGNIN_OK::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SIGNIN_OK.uid)
}

// string nickName = 2;
inline void S_SIGNIN_OK::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& S_SIGNIN_OK::nickname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SIGNIN_OK.nickName)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_SIGNIN_OK::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_SIGNIN_OK.nickName)
}
inline std::string* S_SIGNIN_OK::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SIGNIN_OK.nickName)
  return _internal_mutable_nickname();
}
inline const std::string& S_SIGNIN_OK::_internal_nickname() const {
  return nickname_.Get();
}
inline void S_SIGNIN_OK::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_SIGNIN_OK::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_SIGNIN_OK::release_nickname() {
  // @@protoc_insertion_point(field_release:Protocol.S_SIGNIN_OK.nickName)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_SIGNIN_OK::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SIGNIN_OK.nickName)
}

// -------------------------------------------------------------------

// C_SIGNUP

// string id = 1;
inline void C_SIGNUP::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& C_SIGNUP::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SIGNUP.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SIGNUP::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_SIGNUP.id)
}
inline std::string* C_SIGNUP::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_SIGNUP.id)
  return _internal_mutable_id();
}
inline const std::string& C_SIGNUP::_internal_id() const {
  return id_.Get();
}
inline void C_SIGNUP::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_SIGNUP::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_SIGNUP::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_SIGNUP.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_SIGNUP::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SIGNUP.id)
}

// string password = 2;
inline void C_SIGNUP::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& C_SIGNUP::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SIGNUP.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SIGNUP::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_SIGNUP.password)
}
inline std::string* C_SIGNUP::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_SIGNUP.password)
  return _internal_mutable_password();
}
inline const std::string& C_SIGNUP::_internal_password() const {
  return password_.Get();
}
inline void C_SIGNUP::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_SIGNUP::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_SIGNUP::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C_SIGNUP.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_SIGNUP::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SIGNUP.password)
}

// string nickname = 3;
inline void C_SIGNUP::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& C_SIGNUP::nickname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SIGNUP.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SIGNUP::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_SIGNUP.nickname)
}
inline std::string* C_SIGNUP::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_SIGNUP.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& C_SIGNUP::_internal_nickname() const {
  return nickname_.Get();
}
inline void C_SIGNUP::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_SIGNUP::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_SIGNUP::release_nickname() {
  // @@protoc_insertion_point(field_release:Protocol.C_SIGNUP.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_SIGNUP::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SIGNUP.nickname)
}

// -------------------------------------------------------------------

// S_SIGNUP_OK

// -------------------------------------------------------------------

// C_ROOM_CREATE

// string roomName = 1;
inline void C_ROOM_CREATE::clear_roomname() {
  roomname_.ClearToEmpty();
}
inline const std::string& C_ROOM_CREATE::roomname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_CREATE.roomName)
  return _internal_roomname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ROOM_CREATE::set_roomname(ArgT0&& arg0, ArgT... args) {
 
 roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_CREATE.roomName)
}
inline std::string* C_ROOM_CREATE::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_ROOM_CREATE.roomName)
  return _internal_mutable_roomname();
}
inline const std::string& C_ROOM_CREATE::_internal_roomname() const {
  return roomname_.Get();
}
inline void C_ROOM_CREATE::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_ROOM_CREATE::_internal_mutable_roomname() {
  
  return roomname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_ROOM_CREATE::release_roomname() {
  // @@protoc_insertion_point(field_release:Protocol.C_ROOM_CREATE.roomName)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_ROOM_CREATE::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ROOM_CREATE.roomName)
}

// string password = 2;
inline void C_ROOM_CREATE::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& C_ROOM_CREATE::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_CREATE.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ROOM_CREATE::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_CREATE.password)
}
inline std::string* C_ROOM_CREATE::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_ROOM_CREATE.password)
  return _internal_mutable_password();
}
inline const std::string& C_ROOM_CREATE::_internal_password() const {
  return password_.Get();
}
inline void C_ROOM_CREATE::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_ROOM_CREATE::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_ROOM_CREATE::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C_ROOM_CREATE.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_ROOM_CREATE::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ROOM_CREATE.password)
}

// int32 maxPlayerCount = 3;
inline void C_ROOM_CREATE::clear_maxplayercount() {
  maxplayercount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_ROOM_CREATE::_internal_maxplayercount() const {
  return maxplayercount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_ROOM_CREATE::maxplayercount() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_CREATE.maxPlayerCount)
  return _internal_maxplayercount();
}
inline void C_ROOM_CREATE::_internal_set_maxplayercount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxplayercount_ = value;
}
inline void C_ROOM_CREATE::set_maxplayercount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxplayercount(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_CREATE.maxPlayerCount)
}

// bool isPrivate = 4;
inline void C_ROOM_CREATE::clear_isprivate() {
  isprivate_ = false;
}
inline bool C_ROOM_CREATE::_internal_isprivate() const {
  return isprivate_;
}
inline bool C_ROOM_CREATE::isprivate() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_CREATE.isPrivate)
  return _internal_isprivate();
}
inline void C_ROOM_CREATE::_internal_set_isprivate(bool value) {
  
  isprivate_ = value;
}
inline void C_ROOM_CREATE::set_isprivate(bool value) {
  _internal_set_isprivate(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_CREATE.isPrivate)
}

// bool isTeam = 5;
inline void C_ROOM_CREATE::clear_isteam() {
  isteam_ = false;
}
inline bool C_ROOM_CREATE::_internal_isteam() const {
  return isteam_;
}
inline bool C_ROOM_CREATE::isteam() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_CREATE.isTeam)
  return _internal_isteam();
}
inline void C_ROOM_CREATE::_internal_set_isteam(bool value) {
  
  isteam_ = value;
}
inline void C_ROOM_CREATE::set_isteam(bool value) {
  _internal_set_isteam(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_CREATE.isTeam)
}

// int32 map = 6;
inline void C_ROOM_CREATE::clear_map() {
  map_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_ROOM_CREATE::_internal_map() const {
  return map_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_ROOM_CREATE::map() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_CREATE.map)
  return _internal_map();
}
inline void C_ROOM_CREATE::_internal_set_map(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_ = value;
}
inline void C_ROOM_CREATE::set_map(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_CREATE.map)
}

// -------------------------------------------------------------------

// C_ROOM_SETTING

// string roomName = 1;
inline void C_ROOM_SETTING::clear_roomname() {
  roomname_.ClearToEmpty();
}
inline const std::string& C_ROOM_SETTING::roomname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_SETTING.roomName)
  return _internal_roomname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ROOM_SETTING::set_roomname(ArgT0&& arg0, ArgT... args) {
 
 roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_SETTING.roomName)
}
inline std::string* C_ROOM_SETTING::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_ROOM_SETTING.roomName)
  return _internal_mutable_roomname();
}
inline const std::string& C_ROOM_SETTING::_internal_roomname() const {
  return roomname_.Get();
}
inline void C_ROOM_SETTING::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_ROOM_SETTING::_internal_mutable_roomname() {
  
  return roomname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_ROOM_SETTING::release_roomname() {
  // @@protoc_insertion_point(field_release:Protocol.C_ROOM_SETTING.roomName)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_ROOM_SETTING::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ROOM_SETTING.roomName)
}

// string password = 2;
inline void C_ROOM_SETTING::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& C_ROOM_SETTING::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_SETTING.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ROOM_SETTING::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_SETTING.password)
}
inline std::string* C_ROOM_SETTING::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_ROOM_SETTING.password)
  return _internal_mutable_password();
}
inline const std::string& C_ROOM_SETTING::_internal_password() const {
  return password_.Get();
}
inline void C_ROOM_SETTING::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_ROOM_SETTING::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_ROOM_SETTING::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C_ROOM_SETTING.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_ROOM_SETTING::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ROOM_SETTING.password)
}

// int32 maxPlayerCount = 3;
inline void C_ROOM_SETTING::clear_maxplayercount() {
  maxplayercount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_ROOM_SETTING::_internal_maxplayercount() const {
  return maxplayercount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_ROOM_SETTING::maxplayercount() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_SETTING.maxPlayerCount)
  return _internal_maxplayercount();
}
inline void C_ROOM_SETTING::_internal_set_maxplayercount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxplayercount_ = value;
}
inline void C_ROOM_SETTING::set_maxplayercount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxplayercount(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_SETTING.maxPlayerCount)
}

// bool isPrivate = 4;
inline void C_ROOM_SETTING::clear_isprivate() {
  isprivate_ = false;
}
inline bool C_ROOM_SETTING::_internal_isprivate() const {
  return isprivate_;
}
inline bool C_ROOM_SETTING::isprivate() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_SETTING.isPrivate)
  return _internal_isprivate();
}
inline void C_ROOM_SETTING::_internal_set_isprivate(bool value) {
  
  isprivate_ = value;
}
inline void C_ROOM_SETTING::set_isprivate(bool value) {
  _internal_set_isprivate(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_SETTING.isPrivate)
}

// bool isTeam = 5;
inline void C_ROOM_SETTING::clear_isteam() {
  isteam_ = false;
}
inline bool C_ROOM_SETTING::_internal_isteam() const {
  return isteam_;
}
inline bool C_ROOM_SETTING::isteam() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_SETTING.isTeam)
  return _internal_isteam();
}
inline void C_ROOM_SETTING::_internal_set_isteam(bool value) {
  
  isteam_ = value;
}
inline void C_ROOM_SETTING::set_isteam(bool value) {
  _internal_set_isteam(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_SETTING.isTeam)
}

// int32 map = 6;
inline void C_ROOM_SETTING::clear_map() {
  map_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_ROOM_SETTING::_internal_map() const {
  return map_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_ROOM_SETTING::map() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_SETTING.map)
  return _internal_map();
}
inline void C_ROOM_SETTING::_internal_set_map(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_ = value;
}
inline void C_ROOM_SETTING::set_map(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_SETTING.map)
}

// -------------------------------------------------------------------

// C_ROOM_ENTER

// string roomCode = 1;
inline void C_ROOM_ENTER::clear_roomcode() {
  roomcode_.ClearToEmpty();
}
inline const std::string& C_ROOM_ENTER::roomcode() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_ENTER.roomCode)
  return _internal_roomcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ROOM_ENTER::set_roomcode(ArgT0&& arg0, ArgT... args) {
 
 roomcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_ENTER.roomCode)
}
inline std::string* C_ROOM_ENTER::mutable_roomcode() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_ROOM_ENTER.roomCode)
  return _internal_mutable_roomcode();
}
inline const std::string& C_ROOM_ENTER::_internal_roomcode() const {
  return roomcode_.Get();
}
inline void C_ROOM_ENTER::_internal_set_roomcode(const std::string& value) {
  
  roomcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_ROOM_ENTER::_internal_mutable_roomcode() {
  
  return roomcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_ROOM_ENTER::release_roomcode() {
  // @@protoc_insertion_point(field_release:Protocol.C_ROOM_ENTER.roomCode)
  return roomcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_ROOM_ENTER::set_allocated_roomcode(std::string* roomcode) {
  if (roomcode != nullptr) {
    
  } else {
    
  }
  roomcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomcode,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ROOM_ENTER.roomCode)
}

// string password = 2;
inline void C_ROOM_ENTER::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& C_ROOM_ENTER::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_ENTER.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ROOM_ENTER::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_ENTER.password)
}
inline std::string* C_ROOM_ENTER::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_ROOM_ENTER.password)
  return _internal_mutable_password();
}
inline const std::string& C_ROOM_ENTER::_internal_password() const {
  return password_.Get();
}
inline void C_ROOM_ENTER::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_ROOM_ENTER::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_ROOM_ENTER::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C_ROOM_ENTER.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_ROOM_ENTER::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ROOM_ENTER.password)
}

// -------------------------------------------------------------------

// S_ROOM_ENTER

// .Protocol.RoomInfo roomInfo = 1;
inline bool S_ROOM_ENTER::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool S_ROOM_ENTER::has_roominfo() const {
  return _internal_has_roominfo();
}
inline const ::Protocol::RoomInfo& S_ROOM_ENTER::_internal_roominfo() const {
  const ::Protocol::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_ROOM_ENTER::roominfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_ENTER.roomInfo)
  return _internal_roominfo();
}
inline void S_ROOM_ENTER::unsafe_arena_set_allocated_roominfo(
    ::Protocol::RoomInfo* roominfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ROOM_ENTER.roomInfo)
}
inline ::Protocol::RoomInfo* S_ROOM_ENTER::release_roominfo() {
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoomInfo* S_ROOM_ENTER::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOM_ENTER.roomInfo)
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_ROOM_ENTER::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::Protocol::RoomInfo* S_ROOM_ENTER::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_ENTER.roomInfo)
  return _internal_mutable_roominfo();
}
inline void S_ROOM_ENTER::set_allocated_roominfo(::Protocol::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo));
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOM_ENTER.roomInfo)
}

// -------------------------------------------------------------------

// C_ROOM_LEAVE

// -------------------------------------------------------------------

// S_ROOM_LEAVE

// .Protocol.RoomInfo roomInfo = 1;
inline bool S_ROOM_LEAVE::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool S_ROOM_LEAVE::has_roominfo() const {
  return _internal_has_roominfo();
}
inline const ::Protocol::RoomInfo& S_ROOM_LEAVE::_internal_roominfo() const {
  const ::Protocol::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_ROOM_LEAVE::roominfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_LEAVE.roomInfo)
  return _internal_roominfo();
}
inline void S_ROOM_LEAVE::unsafe_arena_set_allocated_roominfo(
    ::Protocol::RoomInfo* roominfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ROOM_LEAVE.roomInfo)
}
inline ::Protocol::RoomInfo* S_ROOM_LEAVE::release_roominfo() {
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoomInfo* S_ROOM_LEAVE::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOM_LEAVE.roomInfo)
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_ROOM_LEAVE::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::Protocol::RoomInfo* S_ROOM_LEAVE::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_LEAVE.roomInfo)
  return _internal_mutable_roominfo();
}
inline void S_ROOM_LEAVE::set_allocated_roominfo(::Protocol::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo));
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOM_LEAVE.roomInfo)
}

// -------------------------------------------------------------------

// S_ANOTHER_ENTER_ROOM

// .Protocol.RoomInfo roomInfo = 1;
inline bool S_ANOTHER_ENTER_ROOM::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool S_ANOTHER_ENTER_ROOM::has_roominfo() const {
  return _internal_has_roominfo();
}
inline const ::Protocol::RoomInfo& S_ANOTHER_ENTER_ROOM::_internal_roominfo() const {
  const ::Protocol::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_ANOTHER_ENTER_ROOM::roominfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANOTHER_ENTER_ROOM.roomInfo)
  return _internal_roominfo();
}
inline void S_ANOTHER_ENTER_ROOM::unsafe_arena_set_allocated_roominfo(
    ::Protocol::RoomInfo* roominfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ANOTHER_ENTER_ROOM.roomInfo)
}
inline ::Protocol::RoomInfo* S_ANOTHER_ENTER_ROOM::release_roominfo() {
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoomInfo* S_ANOTHER_ENTER_ROOM::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_ANOTHER_ENTER_ROOM.roomInfo)
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_ANOTHER_ENTER_ROOM::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::Protocol::RoomInfo* S_ANOTHER_ENTER_ROOM::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ANOTHER_ENTER_ROOM.roomInfo)
  return _internal_mutable_roominfo();
}
inline void S_ANOTHER_ENTER_ROOM::set_allocated_roominfo(::Protocol::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo));
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ANOTHER_ENTER_ROOM.roomInfo)
}

// -------------------------------------------------------------------

// S_ANOTHER_LEAVE_ROOM

// .Protocol.RoomInfo roomInfo = 1;
inline bool S_ANOTHER_LEAVE_ROOM::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool S_ANOTHER_LEAVE_ROOM::has_roominfo() const {
  return _internal_has_roominfo();
}
inline const ::Protocol::RoomInfo& S_ANOTHER_LEAVE_ROOM::_internal_roominfo() const {
  const ::Protocol::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_ANOTHER_LEAVE_ROOM::roominfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANOTHER_LEAVE_ROOM.roomInfo)
  return _internal_roominfo();
}
inline void S_ANOTHER_LEAVE_ROOM::unsafe_arena_set_allocated_roominfo(
    ::Protocol::RoomInfo* roominfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ANOTHER_LEAVE_ROOM.roomInfo)
}
inline ::Protocol::RoomInfo* S_ANOTHER_LEAVE_ROOM::release_roominfo() {
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoomInfo* S_ANOTHER_LEAVE_ROOM::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_ANOTHER_LEAVE_ROOM.roomInfo)
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_ANOTHER_LEAVE_ROOM::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::Protocol::RoomInfo* S_ANOTHER_LEAVE_ROOM::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ANOTHER_LEAVE_ROOM.roomInfo)
  return _internal_mutable_roominfo();
}
inline void S_ANOTHER_LEAVE_ROOM::set_allocated_roominfo(::Protocol::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo));
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ANOTHER_LEAVE_ROOM.roomInfo)
}

// -------------------------------------------------------------------

// C_ROOM_START

// -------------------------------------------------------------------

// S_ROOM_START

// .Protocol.RoomInfo roomInfo = 1;
inline bool S_ROOM_START::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool S_ROOM_START::has_roominfo() const {
  return _internal_has_roominfo();
}
inline const ::Protocol::RoomInfo& S_ROOM_START::_internal_roominfo() const {
  const ::Protocol::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_ROOM_START::roominfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_START.roomInfo)
  return _internal_roominfo();
}
inline void S_ROOM_START::unsafe_arena_set_allocated_roominfo(
    ::Protocol::RoomInfo* roominfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ROOM_START.roomInfo)
}
inline ::Protocol::RoomInfo* S_ROOM_START::release_roominfo() {
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoomInfo* S_ROOM_START::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOM_START.roomInfo)
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_ROOM_START::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::Protocol::RoomInfo* S_ROOM_START::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_START.roomInfo)
  return _internal_mutable_roominfo();
}
inline void S_ROOM_START::set_allocated_roominfo(::Protocol::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo));
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOM_START.roomInfo)
}

// .Protocol.GameRule gameRule = 2;
inline bool S_ROOM_START::_internal_has_gamerule() const {
  return this != internal_default_instance() && gamerule_ != nullptr;
}
inline bool S_ROOM_START::has_gamerule() const {
  return _internal_has_gamerule();
}
inline const ::Protocol::GameRule& S_ROOM_START::_internal_gamerule() const {
  const ::Protocol::GameRule* p = gamerule_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::GameRule&>(
      ::Protocol::_GameRule_default_instance_);
}
inline const ::Protocol::GameRule& S_ROOM_START::gamerule() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_START.gameRule)
  return _internal_gamerule();
}
inline void S_ROOM_START::unsafe_arena_set_allocated_gamerule(
    ::Protocol::GameRule* gamerule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gamerule_);
  }
  gamerule_ = gamerule;
  if (gamerule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ROOM_START.gameRule)
}
inline ::Protocol::GameRule* S_ROOM_START::release_gamerule() {
  
  ::Protocol::GameRule* temp = gamerule_;
  gamerule_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::GameRule* S_ROOM_START::unsafe_arena_release_gamerule() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOM_START.gameRule)
  
  ::Protocol::GameRule* temp = gamerule_;
  gamerule_ = nullptr;
  return temp;
}
inline ::Protocol::GameRule* S_ROOM_START::_internal_mutable_gamerule() {
  
  if (gamerule_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::GameRule>(GetArenaForAllocation());
    gamerule_ = p;
  }
  return gamerule_;
}
inline ::Protocol::GameRule* S_ROOM_START::mutable_gamerule() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_START.gameRule)
  return _internal_mutable_gamerule();
}
inline void S_ROOM_START::set_allocated_gamerule(::Protocol::GameRule* gamerule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gamerule_);
  }
  if (gamerule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gamerule));
    if (message_arena != submessage_arena) {
      gamerule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamerule, submessage_arena);
    }
    
  } else {
    
  }
  gamerule_ = gamerule;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOM_START.gameRule)
}

// int32 spawnPointIndex = 3;
inline void S_ROOM_START::clear_spawnpointindex() {
  spawnpointindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ROOM_START::_internal_spawnpointindex() const {
  return spawnpointindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ROOM_START::spawnpointindex() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_START.spawnPointIndex)
  return _internal_spawnpointindex();
}
inline void S_ROOM_START::_internal_set_spawnpointindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spawnpointindex_ = value;
}
inline void S_ROOM_START::set_spawnpointindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spawnpointindex(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ROOM_START.spawnPointIndex)
}

// -------------------------------------------------------------------

// S_GAME_START

// -------------------------------------------------------------------

// S_GAME_END

// .Protocol.RoomInfo roomInfo = 1;
inline bool S_GAME_END::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool S_GAME_END::has_roominfo() const {
  return _internal_has_roominfo();
}
inline const ::Protocol::RoomInfo& S_GAME_END::_internal_roominfo() const {
  const ::Protocol::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_GAME_END::roominfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_GAME_END.roomInfo)
  return _internal_roominfo();
}
inline void S_GAME_END::unsafe_arena_set_allocated_roominfo(
    ::Protocol::RoomInfo* roominfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_GAME_END.roomInfo)
}
inline ::Protocol::RoomInfo* S_GAME_END::release_roominfo() {
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoomInfo* S_GAME_END::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_GAME_END.roomInfo)
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_GAME_END::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::Protocol::RoomInfo* S_GAME_END::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_GAME_END.roomInfo)
  return _internal_mutable_roominfo();
}
inline void S_GAME_END::set_allocated_roominfo(::Protocol::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo));
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_GAME_END.roomInfo)
}

// -------------------------------------------------------------------

// C_ROOM_CHANGE_TEAM

// .Protocol.eTeamColor teamColor = 1;
inline void C_ROOM_CHANGE_TEAM::clear_teamcolor() {
  teamcolor_ = 0;
}
inline ::Protocol::eTeamColor C_ROOM_CHANGE_TEAM::_internal_teamcolor() const {
  return static_cast< ::Protocol::eTeamColor >(teamcolor_);
}
inline ::Protocol::eTeamColor C_ROOM_CHANGE_TEAM::teamcolor() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_CHANGE_TEAM.teamColor)
  return _internal_teamcolor();
}
inline void C_ROOM_CHANGE_TEAM::_internal_set_teamcolor(::Protocol::eTeamColor value) {
  
  teamcolor_ = value;
}
inline void C_ROOM_CHANGE_TEAM::set_teamcolor(::Protocol::eTeamColor value) {
  _internal_set_teamcolor(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_CHANGE_TEAM.teamColor)
}

// string targetNickName = 2;
inline void C_ROOM_CHANGE_TEAM::clear_targetnickname() {
  targetnickname_.ClearToEmpty();
}
inline const std::string& C_ROOM_CHANGE_TEAM::targetnickname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_CHANGE_TEAM.targetNickName)
  return _internal_targetnickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ROOM_CHANGE_TEAM::set_targetnickname(ArgT0&& arg0, ArgT... args) {
 
 targetnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_CHANGE_TEAM.targetNickName)
}
inline std::string* C_ROOM_CHANGE_TEAM::mutable_targetnickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_ROOM_CHANGE_TEAM.targetNickName)
  return _internal_mutable_targetnickname();
}
inline const std::string& C_ROOM_CHANGE_TEAM::_internal_targetnickname() const {
  return targetnickname_.Get();
}
inline void C_ROOM_CHANGE_TEAM::_internal_set_targetnickname(const std::string& value) {
  
  targetnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_ROOM_CHANGE_TEAM::_internal_mutable_targetnickname() {
  
  return targetnickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_ROOM_CHANGE_TEAM::release_targetnickname() {
  // @@protoc_insertion_point(field_release:Protocol.C_ROOM_CHANGE_TEAM.targetNickName)
  return targetnickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_ROOM_CHANGE_TEAM::set_allocated_targetnickname(std::string* targetnickname) {
  if (targetnickname != nullptr) {
    
  } else {
    
  }
  targetnickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetnickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ROOM_CHANGE_TEAM.targetNickName)
}

// -------------------------------------------------------------------

// S_ROOM_CHANGE_TEAM

// .Protocol.RoomInfo roomInfo = 1;
inline bool S_ROOM_CHANGE_TEAM::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool S_ROOM_CHANGE_TEAM::has_roominfo() const {
  return _internal_has_roominfo();
}
inline const ::Protocol::RoomInfo& S_ROOM_CHANGE_TEAM::_internal_roominfo() const {
  const ::Protocol::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_ROOM_CHANGE_TEAM::roominfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_CHANGE_TEAM.roomInfo)
  return _internal_roominfo();
}
inline void S_ROOM_CHANGE_TEAM::unsafe_arena_set_allocated_roominfo(
    ::Protocol::RoomInfo* roominfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ROOM_CHANGE_TEAM.roomInfo)
}
inline ::Protocol::RoomInfo* S_ROOM_CHANGE_TEAM::release_roominfo() {
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoomInfo* S_ROOM_CHANGE_TEAM::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOM_CHANGE_TEAM.roomInfo)
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_ROOM_CHANGE_TEAM::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::Protocol::RoomInfo* S_ROOM_CHANGE_TEAM::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_CHANGE_TEAM.roomInfo)
  return _internal_mutable_roominfo();
}
inline void S_ROOM_CHANGE_TEAM::set_allocated_roominfo(::Protocol::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo));
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOM_CHANGE_TEAM.roomInfo)
}

// -------------------------------------------------------------------

// C_ROOM_KICK

// string targetNickName = 1;
inline void C_ROOM_KICK::clear_targetnickname() {
  targetnickname_.ClearToEmpty();
}
inline const std::string& C_ROOM_KICK::targetnickname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_KICK.targetNickName)
  return _internal_targetnickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ROOM_KICK::set_targetnickname(ArgT0&& arg0, ArgT... args) {
 
 targetnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_KICK.targetNickName)
}
inline std::string* C_ROOM_KICK::mutable_targetnickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_ROOM_KICK.targetNickName)
  return _internal_mutable_targetnickname();
}
inline const std::string& C_ROOM_KICK::_internal_targetnickname() const {
  return targetnickname_.Get();
}
inline void C_ROOM_KICK::_internal_set_targetnickname(const std::string& value) {
  
  targetnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_ROOM_KICK::_internal_mutable_targetnickname() {
  
  return targetnickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_ROOM_KICK::release_targetnickname() {
  // @@protoc_insertion_point(field_release:Protocol.C_ROOM_KICK.targetNickName)
  return targetnickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_ROOM_KICK::set_allocated_targetnickname(std::string* targetnickname) {
  if (targetnickname != nullptr) {
    
  } else {
    
  }
  targetnickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetnickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ROOM_KICK.targetNickName)
}

// -------------------------------------------------------------------

// S_ROOM_KICK

// .Protocol.RoomInfo roomInfo = 1;
inline bool S_ROOM_KICK::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool S_ROOM_KICK::has_roominfo() const {
  return _internal_has_roominfo();
}
inline const ::Protocol::RoomInfo& S_ROOM_KICK::_internal_roominfo() const {
  const ::Protocol::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_ROOM_KICK::roominfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_KICK.roomInfo)
  return _internal_roominfo();
}
inline void S_ROOM_KICK::unsafe_arena_set_allocated_roominfo(
    ::Protocol::RoomInfo* roominfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ROOM_KICK.roomInfo)
}
inline ::Protocol::RoomInfo* S_ROOM_KICK::release_roominfo() {
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoomInfo* S_ROOM_KICK::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOM_KICK.roomInfo)
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_ROOM_KICK::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::Protocol::RoomInfo* S_ROOM_KICK::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_KICK.roomInfo)
  return _internal_mutable_roominfo();
}
inline void S_ROOM_KICK::set_allocated_roominfo(::Protocol::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo));
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOM_KICK.roomInfo)
}

// -------------------------------------------------------------------

// C_PLAY_UPDATE

// .Protocol.PlayerData playerData = 1;
inline bool C_PLAY_UPDATE::_internal_has_playerdata() const {
  return this != internal_default_instance() && playerdata_ != nullptr;
}
inline bool C_PLAY_UPDATE::has_playerdata() const {
  return _internal_has_playerdata();
}
inline const ::Protocol::PlayerData& C_PLAY_UPDATE::_internal_playerdata() const {
  const ::Protocol::PlayerData* p = playerdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerData&>(
      ::Protocol::_PlayerData_default_instance_);
}
inline const ::Protocol::PlayerData& C_PLAY_UPDATE::playerdata() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAY_UPDATE.playerData)
  return _internal_playerdata();
}
inline void C_PLAY_UPDATE::unsafe_arena_set_allocated_playerdata(
    ::Protocol::PlayerData* playerdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  playerdata_ = playerdata;
  if (playerdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PLAY_UPDATE.playerData)
}
inline ::Protocol::PlayerData* C_PLAY_UPDATE::release_playerdata() {
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PlayerData* C_PLAY_UPDATE::unsafe_arena_release_playerdata() {
  // @@protoc_insertion_point(field_release:Protocol.C_PLAY_UPDATE.playerData)
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerData* C_PLAY_UPDATE::_internal_mutable_playerdata() {
  
  if (playerdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerData>(GetArenaForAllocation());
    playerdata_ = p;
  }
  return playerdata_;
}
inline ::Protocol::PlayerData* C_PLAY_UPDATE::mutable_playerdata() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_PLAY_UPDATE.playerData)
  return _internal_mutable_playerdata();
}
inline void C_PLAY_UPDATE::set_allocated_playerdata(::Protocol::PlayerData* playerdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  if (playerdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata));
    if (message_arena != submessage_arena) {
      playerdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    
  } else {
    
  }
  playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PLAY_UPDATE.playerData)
}

// -------------------------------------------------------------------

// S_PLAY_UPDATE

// .Protocol.RoomInfo roomInfo = 1;
inline bool S_PLAY_UPDATE::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool S_PLAY_UPDATE::has_roominfo() const {
  return _internal_has_roominfo();
}
inline const ::Protocol::RoomInfo& S_PLAY_UPDATE::_internal_roominfo() const {
  const ::Protocol::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_PLAY_UPDATE::roominfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAY_UPDATE.roomInfo)
  return _internal_roominfo();
}
inline void S_PLAY_UPDATE::unsafe_arena_set_allocated_roominfo(
    ::Protocol::RoomInfo* roominfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAY_UPDATE.roomInfo)
}
inline ::Protocol::RoomInfo* S_PLAY_UPDATE::release_roominfo() {
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::RoomInfo* S_PLAY_UPDATE::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAY_UPDATE.roomInfo)
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_PLAY_UPDATE::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::Protocol::RoomInfo* S_PLAY_UPDATE::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAY_UPDATE.roomInfo)
  return _internal_mutable_roominfo();
}
inline void S_PLAY_UPDATE::set_allocated_roominfo(::Protocol::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo));
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAY_UPDATE.roomInfo)
}

// repeated .Protocol.PlayerData playerData = 2;
inline int S_PLAY_UPDATE::_internal_playerdata_size() const {
  return playerdata_.size();
}
inline int S_PLAY_UPDATE::playerdata_size() const {
  return _internal_playerdata_size();
}
inline ::Protocol::PlayerData* S_PLAY_UPDATE::mutable_playerdata(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAY_UPDATE.playerData)
  return playerdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerData >*
S_PLAY_UPDATE::mutable_playerdata() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_PLAY_UPDATE.playerData)
  return &playerdata_;
}
inline const ::Protocol::PlayerData& S_PLAY_UPDATE::_internal_playerdata(int index) const {
  return playerdata_.Get(index);
}
inline const ::Protocol::PlayerData& S_PLAY_UPDATE::playerdata(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAY_UPDATE.playerData)
  return _internal_playerdata(index);
}
inline ::Protocol::PlayerData* S_PLAY_UPDATE::_internal_add_playerdata() {
  return playerdata_.Add();
}
inline ::Protocol::PlayerData* S_PLAY_UPDATE::add_playerdata() {
  // @@protoc_insertion_point(field_add:Protocol.S_PLAY_UPDATE.playerData)
  return _internal_add_playerdata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerData >&
S_PLAY_UPDATE::playerdata() const {
  // @@protoc_insertion_point(field_list:Protocol.S_PLAY_UPDATE.playerData)
  return playerdata_;
}

// -------------------------------------------------------------------

// C_ROOM_LIST_REQUEST

// -------------------------------------------------------------------

// S_ROOM_LIST

// repeated .Protocol.RoomInfo roomInfo = 1;
inline int S_ROOM_LIST::_internal_roominfo_size() const {
  return roominfo_.size();
}
inline int S_ROOM_LIST::roominfo_size() const {
  return _internal_roominfo_size();
}
inline ::Protocol::RoomInfo* S_ROOM_LIST::mutable_roominfo(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_LIST.roomInfo)
  return roominfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomInfo >*
S_ROOM_LIST::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_ROOM_LIST.roomInfo)
  return &roominfo_;
}
inline const ::Protocol::RoomInfo& S_ROOM_LIST::_internal_roominfo(int index) const {
  return roominfo_.Get(index);
}
inline const ::Protocol::RoomInfo& S_ROOM_LIST::roominfo(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_LIST.roomInfo)
  return _internal_roominfo(index);
}
inline ::Protocol::RoomInfo* S_ROOM_LIST::_internal_add_roominfo() {
  return roominfo_.Add();
}
inline ::Protocol::RoomInfo* S_ROOM_LIST::add_roominfo() {
  // @@protoc_insertion_point(field_add:Protocol.S_ROOM_LIST.roomInfo)
  return _internal_add_roominfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomInfo >&
S_ROOM_LIST::roominfo() const {
  // @@protoc_insertion_point(field_list:Protocol.S_ROOM_LIST.roomInfo)
  return roominfo_;
}

// -------------------------------------------------------------------

// C_PLAY_JUMP

// .Protocol.PlayerData playerData = 1;
inline bool C_PLAY_JUMP::_internal_has_playerdata() const {
  return this != internal_default_instance() && playerdata_ != nullptr;
}
inline bool C_PLAY_JUMP::has_playerdata() const {
  return _internal_has_playerdata();
}
inline const ::Protocol::PlayerData& C_PLAY_JUMP::_internal_playerdata() const {
  const ::Protocol::PlayerData* p = playerdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerData&>(
      ::Protocol::_PlayerData_default_instance_);
}
inline const ::Protocol::PlayerData& C_PLAY_JUMP::playerdata() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAY_JUMP.playerData)
  return _internal_playerdata();
}
inline void C_PLAY_JUMP::unsafe_arena_set_allocated_playerdata(
    ::Protocol::PlayerData* playerdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  playerdata_ = playerdata;
  if (playerdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PLAY_JUMP.playerData)
}
inline ::Protocol::PlayerData* C_PLAY_JUMP::release_playerdata() {
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PlayerData* C_PLAY_JUMP::unsafe_arena_release_playerdata() {
  // @@protoc_insertion_point(field_release:Protocol.C_PLAY_JUMP.playerData)
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerData* C_PLAY_JUMP::_internal_mutable_playerdata() {
  
  if (playerdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerData>(GetArenaForAllocation());
    playerdata_ = p;
  }
  return playerdata_;
}
inline ::Protocol::PlayerData* C_PLAY_JUMP::mutable_playerdata() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_PLAY_JUMP.playerData)
  return _internal_mutable_playerdata();
}
inline void C_PLAY_JUMP::set_allocated_playerdata(::Protocol::PlayerData* playerdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  if (playerdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata));
    if (message_arena != submessage_arena) {
      playerdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    
  } else {
    
  }
  playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PLAY_JUMP.playerData)
}

// -------------------------------------------------------------------

// S_PLAY_JUMP

// .Protocol.PlayerData playerData = 1;
inline bool S_PLAY_JUMP::_internal_has_playerdata() const {
  return this != internal_default_instance() && playerdata_ != nullptr;
}
inline bool S_PLAY_JUMP::has_playerdata() const {
  return _internal_has_playerdata();
}
inline const ::Protocol::PlayerData& S_PLAY_JUMP::_internal_playerdata() const {
  const ::Protocol::PlayerData* p = playerdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerData&>(
      ::Protocol::_PlayerData_default_instance_);
}
inline const ::Protocol::PlayerData& S_PLAY_JUMP::playerdata() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAY_JUMP.playerData)
  return _internal_playerdata();
}
inline void S_PLAY_JUMP::unsafe_arena_set_allocated_playerdata(
    ::Protocol::PlayerData* playerdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  playerdata_ = playerdata;
  if (playerdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAY_JUMP.playerData)
}
inline ::Protocol::PlayerData* S_PLAY_JUMP::release_playerdata() {
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_JUMP::unsafe_arena_release_playerdata() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAY_JUMP.playerData)
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_JUMP::_internal_mutable_playerdata() {
  
  if (playerdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerData>(GetArenaForAllocation());
    playerdata_ = p;
  }
  return playerdata_;
}
inline ::Protocol::PlayerData* S_PLAY_JUMP::mutable_playerdata() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAY_JUMP.playerData)
  return _internal_mutable_playerdata();
}
inline void S_PLAY_JUMP::set_allocated_playerdata(::Protocol::PlayerData* playerdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  if (playerdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata));
    if (message_arena != submessage_arena) {
      playerdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    
  } else {
    
  }
  playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAY_JUMP.playerData)
}

// -------------------------------------------------------------------

// C_PLAY_SHOOT

// .Protocol.Transform transform = 1;
inline bool C_PLAY_SHOOT::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool C_PLAY_SHOOT::has_transform() const {
  return _internal_has_transform();
}
inline const ::Protocol::Transform& C_PLAY_SHOOT::_internal_transform() const {
  const ::Protocol::Transform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Transform&>(
      ::Protocol::_Transform_default_instance_);
}
inline const ::Protocol::Transform& C_PLAY_SHOOT::transform() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAY_SHOOT.transform)
  return _internal_transform();
}
inline void C_PLAY_SHOOT::unsafe_arena_set_allocated_transform(
    ::Protocol::Transform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PLAY_SHOOT.transform)
}
inline ::Protocol::Transform* C_PLAY_SHOOT::release_transform() {
  
  ::Protocol::Transform* temp = transform_;
  transform_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Transform* C_PLAY_SHOOT::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:Protocol.C_PLAY_SHOOT.transform)
  
  ::Protocol::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::Protocol::Transform* C_PLAY_SHOOT::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Transform>(GetArenaForAllocation());
    transform_ = p;
  }
  return transform_;
}
inline ::Protocol::Transform* C_PLAY_SHOOT::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_PLAY_SHOOT.transform)
  return _internal_mutable_transform();
}
inline void C_PLAY_SHOOT::set_allocated_transform(::Protocol::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PLAY_SHOOT.transform)
}

// uint64 hitTargetUid = 2;
inline void C_PLAY_SHOOT::clear_hittargetuid() {
  hittargetuid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_PLAY_SHOOT::_internal_hittargetuid() const {
  return hittargetuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_PLAY_SHOOT::hittargetuid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAY_SHOOT.hitTargetUid)
  return _internal_hittargetuid();
}
inline void C_PLAY_SHOOT::_internal_set_hittargetuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hittargetuid_ = value;
}
inline void C_PLAY_SHOOT::set_hittargetuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hittargetuid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAY_SHOOT.hitTargetUid)
}

// .Protocol.eHitLocation hitLocation = 3;
inline void C_PLAY_SHOOT::clear_hitlocation() {
  hitlocation_ = 0;
}
inline ::Protocol::eHitLocation C_PLAY_SHOOT::_internal_hitlocation() const {
  return static_cast< ::Protocol::eHitLocation >(hitlocation_);
}
inline ::Protocol::eHitLocation C_PLAY_SHOOT::hitlocation() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAY_SHOOT.hitLocation)
  return _internal_hitlocation();
}
inline void C_PLAY_SHOOT::_internal_set_hitlocation(::Protocol::eHitLocation value) {
  
  hitlocation_ = value;
}
inline void C_PLAY_SHOOT::set_hitlocation(::Protocol::eHitLocation value) {
  _internal_set_hitlocation(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAY_SHOOT.hitLocation)
}

// -------------------------------------------------------------------

// S_PLAY_SHOOT

// .Protocol.PlayerData shootPlayer = 1;
inline bool S_PLAY_SHOOT::_internal_has_shootplayer() const {
  return this != internal_default_instance() && shootplayer_ != nullptr;
}
inline bool S_PLAY_SHOOT::has_shootplayer() const {
  return _internal_has_shootplayer();
}
inline const ::Protocol::PlayerData& S_PLAY_SHOOT::_internal_shootplayer() const {
  const ::Protocol::PlayerData* p = shootplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerData&>(
      ::Protocol::_PlayerData_default_instance_);
}
inline const ::Protocol::PlayerData& S_PLAY_SHOOT::shootplayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAY_SHOOT.shootPlayer)
  return _internal_shootplayer();
}
inline void S_PLAY_SHOOT::unsafe_arena_set_allocated_shootplayer(
    ::Protocol::PlayerData* shootplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shootplayer_);
  }
  shootplayer_ = shootplayer;
  if (shootplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAY_SHOOT.shootPlayer)
}
inline ::Protocol::PlayerData* S_PLAY_SHOOT::release_shootplayer() {
  
  ::Protocol::PlayerData* temp = shootplayer_;
  shootplayer_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_SHOOT::unsafe_arena_release_shootplayer() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAY_SHOOT.shootPlayer)
  
  ::Protocol::PlayerData* temp = shootplayer_;
  shootplayer_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_SHOOT::_internal_mutable_shootplayer() {
  
  if (shootplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerData>(GetArenaForAllocation());
    shootplayer_ = p;
  }
  return shootplayer_;
}
inline ::Protocol::PlayerData* S_PLAY_SHOOT::mutable_shootplayer() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAY_SHOOT.shootPlayer)
  return _internal_mutable_shootplayer();
}
inline void S_PLAY_SHOOT::set_allocated_shootplayer(::Protocol::PlayerData* shootplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shootplayer_);
  }
  if (shootplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shootplayer));
    if (message_arena != submessage_arena) {
      shootplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shootplayer, submessage_arena);
    }
    
  } else {
    
  }
  shootplayer_ = shootplayer;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAY_SHOOT.shootPlayer)
}

// optional .Protocol.PlayerData hitPlayer = 2;
inline bool S_PLAY_SHOOT::_internal_has_hitplayer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || hitplayer_ != nullptr);
  return value;
}
inline bool S_PLAY_SHOOT::has_hitplayer() const {
  return _internal_has_hitplayer();
}
inline const ::Protocol::PlayerData& S_PLAY_SHOOT::_internal_hitplayer() const {
  const ::Protocol::PlayerData* p = hitplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerData&>(
      ::Protocol::_PlayerData_default_instance_);
}
inline const ::Protocol::PlayerData& S_PLAY_SHOOT::hitplayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAY_SHOOT.hitPlayer)
  return _internal_hitplayer();
}
inline void S_PLAY_SHOOT::unsafe_arena_set_allocated_hitplayer(
    ::Protocol::PlayerData* hitplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hitplayer_);
  }
  hitplayer_ = hitplayer;
  if (hitplayer) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAY_SHOOT.hitPlayer)
}
inline ::Protocol::PlayerData* S_PLAY_SHOOT::release_hitplayer() {
  _has_bits_[0] &= ~0x00000001u;
  ::Protocol::PlayerData* temp = hitplayer_;
  hitplayer_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_SHOOT::unsafe_arena_release_hitplayer() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAY_SHOOT.hitPlayer)
  _has_bits_[0] &= ~0x00000001u;
  ::Protocol::PlayerData* temp = hitplayer_;
  hitplayer_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_SHOOT::_internal_mutable_hitplayer() {
  _has_bits_[0] |= 0x00000001u;
  if (hitplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerData>(GetArenaForAllocation());
    hitplayer_ = p;
  }
  return hitplayer_;
}
inline ::Protocol::PlayerData* S_PLAY_SHOOT::mutable_hitplayer() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAY_SHOOT.hitPlayer)
  return _internal_mutable_hitplayer();
}
inline void S_PLAY_SHOOT::set_allocated_hitplayer(::Protocol::PlayerData* hitplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hitplayer_);
  }
  if (hitplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hitplayer));
    if (message_arena != submessage_arena) {
      hitplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hitplayer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hitplayer_ = hitplayer;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAY_SHOOT.hitPlayer)
}

// optional .Protocol.eHitLocation hitLocation = 3;
inline bool S_PLAY_SHOOT::_internal_has_hitlocation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool S_PLAY_SHOOT::has_hitlocation() const {
  return _internal_has_hitlocation();
}
inline void S_PLAY_SHOOT::clear_hitlocation() {
  hitlocation_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Protocol::eHitLocation S_PLAY_SHOOT::_internal_hitlocation() const {
  return static_cast< ::Protocol::eHitLocation >(hitlocation_);
}
inline ::Protocol::eHitLocation S_PLAY_SHOOT::hitlocation() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAY_SHOOT.hitLocation)
  return _internal_hitlocation();
}
inline void S_PLAY_SHOOT::_internal_set_hitlocation(::Protocol::eHitLocation value) {
  _has_bits_[0] |= 0x00000002u;
  hitlocation_ = value;
}
inline void S_PLAY_SHOOT::set_hitlocation(::Protocol::eHitLocation value) {
  _internal_set_hitlocation(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAY_SHOOT.hitLocation)
}

// -------------------------------------------------------------------

// S_PLAY_KILL_DEATH

// .Protocol.PlayerData deathPlayer = 1;
inline bool S_PLAY_KILL_DEATH::_internal_has_deathplayer() const {
  return this != internal_default_instance() && deathplayer_ != nullptr;
}
inline bool S_PLAY_KILL_DEATH::has_deathplayer() const {
  return _internal_has_deathplayer();
}
inline const ::Protocol::PlayerData& S_PLAY_KILL_DEATH::_internal_deathplayer() const {
  const ::Protocol::PlayerData* p = deathplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerData&>(
      ::Protocol::_PlayerData_default_instance_);
}
inline const ::Protocol::PlayerData& S_PLAY_KILL_DEATH::deathplayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAY_KILL_DEATH.deathPlayer)
  return _internal_deathplayer();
}
inline void S_PLAY_KILL_DEATH::unsafe_arena_set_allocated_deathplayer(
    ::Protocol::PlayerData* deathplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deathplayer_);
  }
  deathplayer_ = deathplayer;
  if (deathplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAY_KILL_DEATH.deathPlayer)
}
inline ::Protocol::PlayerData* S_PLAY_KILL_DEATH::release_deathplayer() {
  
  ::Protocol::PlayerData* temp = deathplayer_;
  deathplayer_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_KILL_DEATH::unsafe_arena_release_deathplayer() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAY_KILL_DEATH.deathPlayer)
  
  ::Protocol::PlayerData* temp = deathplayer_;
  deathplayer_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_KILL_DEATH::_internal_mutable_deathplayer() {
  
  if (deathplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerData>(GetArenaForAllocation());
    deathplayer_ = p;
  }
  return deathplayer_;
}
inline ::Protocol::PlayerData* S_PLAY_KILL_DEATH::mutable_deathplayer() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAY_KILL_DEATH.deathPlayer)
  return _internal_mutable_deathplayer();
}
inline void S_PLAY_KILL_DEATH::set_allocated_deathplayer(::Protocol::PlayerData* deathplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deathplayer_);
  }
  if (deathplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deathplayer));
    if (message_arena != submessage_arena) {
      deathplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deathplayer, submessage_arena);
    }
    
  } else {
    
  }
  deathplayer_ = deathplayer;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAY_KILL_DEATH.deathPlayer)
}

// .Protocol.PlayerData killPlayer = 2;
inline bool S_PLAY_KILL_DEATH::_internal_has_killplayer() const {
  return this != internal_default_instance() && killplayer_ != nullptr;
}
inline bool S_PLAY_KILL_DEATH::has_killplayer() const {
  return _internal_has_killplayer();
}
inline const ::Protocol::PlayerData& S_PLAY_KILL_DEATH::_internal_killplayer() const {
  const ::Protocol::PlayerData* p = killplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerData&>(
      ::Protocol::_PlayerData_default_instance_);
}
inline const ::Protocol::PlayerData& S_PLAY_KILL_DEATH::killplayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAY_KILL_DEATH.killPlayer)
  return _internal_killplayer();
}
inline void S_PLAY_KILL_DEATH::unsafe_arena_set_allocated_killplayer(
    ::Protocol::PlayerData* killplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(killplayer_);
  }
  killplayer_ = killplayer;
  if (killplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAY_KILL_DEATH.killPlayer)
}
inline ::Protocol::PlayerData* S_PLAY_KILL_DEATH::release_killplayer() {
  
  ::Protocol::PlayerData* temp = killplayer_;
  killplayer_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_KILL_DEATH::unsafe_arena_release_killplayer() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAY_KILL_DEATH.killPlayer)
  
  ::Protocol::PlayerData* temp = killplayer_;
  killplayer_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_KILL_DEATH::_internal_mutable_killplayer() {
  
  if (killplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerData>(GetArenaForAllocation());
    killplayer_ = p;
  }
  return killplayer_;
}
inline ::Protocol::PlayerData* S_PLAY_KILL_DEATH::mutable_killplayer() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAY_KILL_DEATH.killPlayer)
  return _internal_mutable_killplayer();
}
inline void S_PLAY_KILL_DEATH::set_allocated_killplayer(::Protocol::PlayerData* killplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(killplayer_);
  }
  if (killplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(killplayer));
    if (message_arena != submessage_arena) {
      killplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, killplayer, submessage_arena);
    }
    
  } else {
    
  }
  killplayer_ = killplayer;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAY_KILL_DEATH.killPlayer)
}

// -------------------------------------------------------------------

// S_PLAY_RESPAWN

// .Protocol.PlayerData playerData = 1;
inline bool S_PLAY_RESPAWN::_internal_has_playerdata() const {
  return this != internal_default_instance() && playerdata_ != nullptr;
}
inline bool S_PLAY_RESPAWN::has_playerdata() const {
  return _internal_has_playerdata();
}
inline const ::Protocol::PlayerData& S_PLAY_RESPAWN::_internal_playerdata() const {
  const ::Protocol::PlayerData* p = playerdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerData&>(
      ::Protocol::_PlayerData_default_instance_);
}
inline const ::Protocol::PlayerData& S_PLAY_RESPAWN::playerdata() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAY_RESPAWN.playerData)
  return _internal_playerdata();
}
inline void S_PLAY_RESPAWN::unsafe_arena_set_allocated_playerdata(
    ::Protocol::PlayerData* playerdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  playerdata_ = playerdata;
  if (playerdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAY_RESPAWN.playerData)
}
inline ::Protocol::PlayerData* S_PLAY_RESPAWN::release_playerdata() {
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_RESPAWN::unsafe_arena_release_playerdata() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAY_RESPAWN.playerData)
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_RESPAWN::_internal_mutable_playerdata() {
  
  if (playerdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerData>(GetArenaForAllocation());
    playerdata_ = p;
  }
  return playerdata_;
}
inline ::Protocol::PlayerData* S_PLAY_RESPAWN::mutable_playerdata() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAY_RESPAWN.playerData)
  return _internal_mutable_playerdata();
}
inline void S_PLAY_RESPAWN::set_allocated_playerdata(::Protocol::PlayerData* playerdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  if (playerdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata));
    if (message_arena != submessage_arena) {
      playerdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    
  } else {
    
  }
  playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAY_RESPAWN.playerData)
}

// int32 spawnPointIndex = 2;
inline void S_PLAY_RESPAWN::clear_spawnpointindex() {
  spawnpointindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_PLAY_RESPAWN::_internal_spawnpointindex() const {
  return spawnpointindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_PLAY_RESPAWN::spawnpointindex() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAY_RESPAWN.spawnPointIndex)
  return _internal_spawnpointindex();
}
inline void S_PLAY_RESPAWN::_internal_set_spawnpointindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spawnpointindex_ = value;
}
inline void S_PLAY_RESPAWN::set_spawnpointindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spawnpointindex(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAY_RESPAWN.spawnPointIndex)
}

// -------------------------------------------------------------------

// C_PLAY_ROLL

// .Protocol.PlayerData playerData = 1;
inline bool C_PLAY_ROLL::_internal_has_playerdata() const {
  return this != internal_default_instance() && playerdata_ != nullptr;
}
inline bool C_PLAY_ROLL::has_playerdata() const {
  return _internal_has_playerdata();
}
inline const ::Protocol::PlayerData& C_PLAY_ROLL::_internal_playerdata() const {
  const ::Protocol::PlayerData* p = playerdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerData&>(
      ::Protocol::_PlayerData_default_instance_);
}
inline const ::Protocol::PlayerData& C_PLAY_ROLL::playerdata() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAY_ROLL.playerData)
  return _internal_playerdata();
}
inline void C_PLAY_ROLL::unsafe_arena_set_allocated_playerdata(
    ::Protocol::PlayerData* playerdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  playerdata_ = playerdata;
  if (playerdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PLAY_ROLL.playerData)
}
inline ::Protocol::PlayerData* C_PLAY_ROLL::release_playerdata() {
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PlayerData* C_PLAY_ROLL::unsafe_arena_release_playerdata() {
  // @@protoc_insertion_point(field_release:Protocol.C_PLAY_ROLL.playerData)
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerData* C_PLAY_ROLL::_internal_mutable_playerdata() {
  
  if (playerdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerData>(GetArenaForAllocation());
    playerdata_ = p;
  }
  return playerdata_;
}
inline ::Protocol::PlayerData* C_PLAY_ROLL::mutable_playerdata() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_PLAY_ROLL.playerData)
  return _internal_mutable_playerdata();
}
inline void C_PLAY_ROLL::set_allocated_playerdata(::Protocol::PlayerData* playerdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  if (playerdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata));
    if (message_arena != submessage_arena) {
      playerdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    
  } else {
    
  }
  playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PLAY_ROLL.playerData)
}

// -------------------------------------------------------------------

// S_PLAY_ROLL

// .Protocol.PlayerData playerData = 1;
inline bool S_PLAY_ROLL::_internal_has_playerdata() const {
  return this != internal_default_instance() && playerdata_ != nullptr;
}
inline bool S_PLAY_ROLL::has_playerdata() const {
  return _internal_has_playerdata();
}
inline const ::Protocol::PlayerData& S_PLAY_ROLL::_internal_playerdata() const {
  const ::Protocol::PlayerData* p = playerdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerData&>(
      ::Protocol::_PlayerData_default_instance_);
}
inline const ::Protocol::PlayerData& S_PLAY_ROLL::playerdata() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAY_ROLL.playerData)
  return _internal_playerdata();
}
inline void S_PLAY_ROLL::unsafe_arena_set_allocated_playerdata(
    ::Protocol::PlayerData* playerdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  playerdata_ = playerdata;
  if (playerdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAY_ROLL.playerData)
}
inline ::Protocol::PlayerData* S_PLAY_ROLL::release_playerdata() {
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_ROLL::unsafe_arena_release_playerdata() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAY_ROLL.playerData)
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_ROLL::_internal_mutable_playerdata() {
  
  if (playerdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerData>(GetArenaForAllocation());
    playerdata_ = p;
  }
  return playerdata_;
}
inline ::Protocol::PlayerData* S_PLAY_ROLL::mutable_playerdata() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAY_ROLL.playerData)
  return _internal_mutable_playerdata();
}
inline void S_PLAY_ROLL::set_allocated_playerdata(::Protocol::PlayerData* playerdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  if (playerdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata));
    if (message_arena != submessage_arena) {
      playerdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    
  } else {
    
  }
  playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAY_ROLL.playerData)
}

// -------------------------------------------------------------------

// C_PLAY_RELOAD

// .Protocol.PlayerData playerData = 1;
inline bool C_PLAY_RELOAD::_internal_has_playerdata() const {
  return this != internal_default_instance() && playerdata_ != nullptr;
}
inline bool C_PLAY_RELOAD::has_playerdata() const {
  return _internal_has_playerdata();
}
inline const ::Protocol::PlayerData& C_PLAY_RELOAD::_internal_playerdata() const {
  const ::Protocol::PlayerData* p = playerdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerData&>(
      ::Protocol::_PlayerData_default_instance_);
}
inline const ::Protocol::PlayerData& C_PLAY_RELOAD::playerdata() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAY_RELOAD.playerData)
  return _internal_playerdata();
}
inline void C_PLAY_RELOAD::unsafe_arena_set_allocated_playerdata(
    ::Protocol::PlayerData* playerdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  playerdata_ = playerdata;
  if (playerdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PLAY_RELOAD.playerData)
}
inline ::Protocol::PlayerData* C_PLAY_RELOAD::release_playerdata() {
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PlayerData* C_PLAY_RELOAD::unsafe_arena_release_playerdata() {
  // @@protoc_insertion_point(field_release:Protocol.C_PLAY_RELOAD.playerData)
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerData* C_PLAY_RELOAD::_internal_mutable_playerdata() {
  
  if (playerdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerData>(GetArenaForAllocation());
    playerdata_ = p;
  }
  return playerdata_;
}
inline ::Protocol::PlayerData* C_PLAY_RELOAD::mutable_playerdata() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_PLAY_RELOAD.playerData)
  return _internal_mutable_playerdata();
}
inline void C_PLAY_RELOAD::set_allocated_playerdata(::Protocol::PlayerData* playerdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  if (playerdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata));
    if (message_arena != submessage_arena) {
      playerdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    
  } else {
    
  }
  playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PLAY_RELOAD.playerData)
}

// -------------------------------------------------------------------

// S_PLAY_RELOAD

// .Protocol.PlayerData playerData = 1;
inline bool S_PLAY_RELOAD::_internal_has_playerdata() const {
  return this != internal_default_instance() && playerdata_ != nullptr;
}
inline bool S_PLAY_RELOAD::has_playerdata() const {
  return _internal_has_playerdata();
}
inline const ::Protocol::PlayerData& S_PLAY_RELOAD::_internal_playerdata() const {
  const ::Protocol::PlayerData* p = playerdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerData&>(
      ::Protocol::_PlayerData_default_instance_);
}
inline const ::Protocol::PlayerData& S_PLAY_RELOAD::playerdata() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAY_RELOAD.playerData)
  return _internal_playerdata();
}
inline void S_PLAY_RELOAD::unsafe_arena_set_allocated_playerdata(
    ::Protocol::PlayerData* playerdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  playerdata_ = playerdata;
  if (playerdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAY_RELOAD.playerData)
}
inline ::Protocol::PlayerData* S_PLAY_RELOAD::release_playerdata() {
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_RELOAD::unsafe_arena_release_playerdata() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAY_RELOAD.playerData)
  
  ::Protocol::PlayerData* temp = playerdata_;
  playerdata_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerData* S_PLAY_RELOAD::_internal_mutable_playerdata() {
  
  if (playerdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerData>(GetArenaForAllocation());
    playerdata_ = p;
  }
  return playerdata_;
}
inline ::Protocol::PlayerData* S_PLAY_RELOAD::mutable_playerdata() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAY_RELOAD.playerData)
  return _internal_mutable_playerdata();
}
inline void S_PLAY_RELOAD::set_allocated_playerdata(::Protocol::PlayerData* playerdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata_);
  }
  if (playerdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata));
    if (message_arena != submessage_arena) {
      playerdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    
  } else {
    
  }
  playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAY_RELOAD.playerData)
}

// -------------------------------------------------------------------

// C_ROOM_CHAT

// string chat = 1;
inline void C_ROOM_CHAT::clear_chat() {
  chat_.ClearToEmpty();
}
inline const std::string& C_ROOM_CHAT::chat() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_CHAT.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ROOM_CHAT::set_chat(ArgT0&& arg0, ArgT... args) {
 
 chat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_CHAT.chat)
}
inline std::string* C_ROOM_CHAT::mutable_chat() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_ROOM_CHAT.chat)
  return _internal_mutable_chat();
}
inline const std::string& C_ROOM_CHAT::_internal_chat() const {
  return chat_.Get();
}
inline void C_ROOM_CHAT::_internal_set_chat(const std::string& value) {
  
  chat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_ROOM_CHAT::_internal_mutable_chat() {
  
  return chat_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_ROOM_CHAT::release_chat() {
  // @@protoc_insertion_point(field_release:Protocol.C_ROOM_CHAT.chat)
  return chat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_ROOM_CHAT::set_allocated_chat(std::string* chat) {
  if (chat != nullptr) {
    
  } else {
    
  }
  chat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ROOM_CHAT.chat)
}

// -------------------------------------------------------------------

// S_ROOM_CHAT

// string nickName = 1;
inline void S_ROOM_CHAT::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& S_ROOM_CHAT::nickname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_CHAT.nickName)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_ROOM_CHAT::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_ROOM_CHAT.nickName)
}
inline std::string* S_ROOM_CHAT::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_CHAT.nickName)
  return _internal_mutable_nickname();
}
inline const std::string& S_ROOM_CHAT::_internal_nickname() const {
  return nickname_.Get();
}
inline void S_ROOM_CHAT::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_ROOM_CHAT::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_ROOM_CHAT::release_nickname() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOM_CHAT.nickName)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_ROOM_CHAT::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOM_CHAT.nickName)
}

// string chat = 2;
inline void S_ROOM_CHAT::clear_chat() {
  chat_.ClearToEmpty();
}
inline const std::string& S_ROOM_CHAT::chat() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_CHAT.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_ROOM_CHAT::set_chat(ArgT0&& arg0, ArgT... args) {
 
 chat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_ROOM_CHAT.chat)
}
inline std::string* S_ROOM_CHAT::mutable_chat() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_CHAT.chat)
  return _internal_mutable_chat();
}
inline const std::string& S_ROOM_CHAT::_internal_chat() const {
  return chat_.Get();
}
inline void S_ROOM_CHAT::_internal_set_chat(const std::string& value) {
  
  chat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_ROOM_CHAT::_internal_mutable_chat() {
  
  return chat_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_ROOM_CHAT::release_chat() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOM_CHAT.chat)
  return chat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_ROOM_CHAT::set_allocated_chat(std::string* chat) {
  if (chat != nullptr) {
    
  } else {
    
  }
  chat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOM_CHAT.chat)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
